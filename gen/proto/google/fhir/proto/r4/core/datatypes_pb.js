"use strict";
//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementSchema = exports.Duration_ComparatorCodeSchema = exports.DurationSchema = exports.Dosage_DoseAndRate_RateXSchema = exports.Dosage_DoseAndRate_DoseXSchema = exports.Dosage_DoseAndRateSchema = exports.Dosage_AsNeededXSchema = exports.DosageSchema = exports.Distance_ComparatorCodeSchema = exports.DistanceSchema = exports.DecimalSchema = exports.DateTime_PrecisionSchema = exports.DateTime_Precision = exports.DateTimeSchema = exports.Date_PrecisionSchema = exports.Date_Precision = exports.DateSchema = exports.DataRequirement_Sort_DirectionCodeSchema = exports.DataRequirement_SortSchema = exports.DataRequirement_DateFilter_ValueXSchema = exports.DataRequirement_DateFilterSchema = exports.DataRequirement_CodeFilterSchema = exports.DataRequirement_SubjectXSchema = exports.DataRequirement_TypeCodeSchema = exports.DataRequirementSchema = exports.Count_ComparatorCodeSchema = exports.CountSchema = exports.Contributor_TypeCodeSchema = exports.ContributorSchema = exports.ContactPoint_UseCodeSchema = exports.ContactPoint_SystemCodeSchema = exports.ContactPointSchema = exports.ContactDetailSchema = exports.CodingSchema = exports.CodeableConceptSchema = exports.CodeSchema = exports.CanonicalSchema = exports.BooleanSchema = exports.Base64BinarySchema = exports.BackboneElementSchema = exports.Attachment_ContentTypeCodeSchema = exports.AttachmentSchema = exports.Annotation_AuthorXSchema = exports.AnnotationSchema = exports.Age_ComparatorCodeSchema = exports.AgeSchema = exports.Address_TypeCodeSchema = exports.Address_UseCodeSchema = exports.AddressSchema = exports.file_proto_google_fhir_proto_r4_core_datatypes = void 0;
exports.PopulationSchema = exports.PeriodSchema = exports.ParameterDefinition_TypeCodeSchema = exports.ParameterDefinition_UseCodeSchema = exports.ParameterDefinitionSchema = exports.OidSchema = exports.Narrative_StatusCodeSchema = exports.NarrativeSchema = exports.MoneyQuantity_ComparatorCodeSchema = exports.MoneyQuantitySchema = exports.Money_CurrencyCodeSchema = exports.MoneySchema = exports.MetaSchema = exports.MarketingStatusSchema = exports.MarkdownSchema = exports.IntegerSchema = exports.Instant_PrecisionSchema = exports.Instant_Precision = exports.InstantSchema = exports.Identifier_UseCodeSchema = exports.IdentifierSchema = exports.IdSchema = exports.HumanName_UseCodeSchema = exports.HumanNameSchema = exports.Extension_ValueXSchema = exports.ExtensionSchema = exports.ExpressionSchema = exports.ElementDefinition_Mapping_LanguageCodeSchema = exports.ElementDefinition_MappingSchema = exports.ElementDefinition_ElementDefinitionBinding_StrengthCodeSchema = exports.ElementDefinition_ElementDefinitionBindingSchema = exports.ElementDefinition_Constraint_SeverityCodeSchema = exports.ElementDefinition_ConstraintSchema = exports.ElementDefinition_MaxValueXSchema = exports.ElementDefinition_MinValueXSchema = exports.ElementDefinition_Example_ValueXSchema = exports.ElementDefinition_ExampleSchema = exports.ElementDefinition_PatternXSchema = exports.ElementDefinition_FixedXSchema = exports.ElementDefinition_DefaultValueXSchema = exports.ElementDefinition_TypeRef_VersioningCodeSchema = exports.ElementDefinition_TypeRef_AggregationCodeSchema = exports.ElementDefinition_TypeRefSchema = exports.ElementDefinition_BaseSchema = exports.ElementDefinition_Slicing_RulesCodeSchema = exports.ElementDefinition_Slicing_Discriminator_TypeCodeSchema = exports.ElementDefinition_Slicing_DiscriminatorSchema = exports.ElementDefinition_SlicingSchema = exports.ElementDefinition_RepresentationCodeSchema = exports.ElementDefinitionSchema = void 0;
exports.CodingWithFixedCodeSchema = exports.XhtmlSchema = exports.UuidSchema = exports.UsageContext_ValueXSchema = exports.UsageContextSchema = exports.UrlSchema = exports.UriSchema = exports.UnsignedIntSchema = exports.TriggerDefinition_TimingXSchema = exports.TriggerDefinition_TypeCodeSchema = exports.TriggerDefinitionSchema = exports.Timing_Repeat_WhenCodeSchema = exports.Timing_Repeat_DayOfWeekCodeSchema = exports.Timing_Repeat_PeriodUnitCodeSchema = exports.Timing_Repeat_DurationUnitCodeSchema = exports.Timing_Repeat_BoundsXSchema = exports.Timing_RepeatSchema = exports.TimingSchema = exports.Time_PrecisionSchema = exports.Time_Precision = exports.TimeSchema = exports.SubstanceAmount_ReferenceRangeSchema = exports.SubstanceAmount_AmountXSchema = exports.SubstanceAmountSchema = exports.StringSchema = exports.SimpleQuantitySchema = exports.Signature_SigFormatCodeSchema = exports.Signature_TargetFormatCodeSchema = exports.SignatureSchema = exports.SampledDataSchema = exports.RelatedArtifact_TypeCodeSchema = exports.RelatedArtifactSchema = exports.ReferenceIdSchema = exports.ReferenceSchema = exports.RatioSchema = exports.RangeSchema = exports.Quantity_ComparatorCodeSchema = exports.QuantitySchema = exports.ProductShelfLifeSchema = exports.ProdCharacteristicSchema = exports.PositiveIntSchema = exports.Population_AgeXSchema = void 0;
var codegenv1_1 = require("@bufbuild/protobuf/codegenv1");
var annotations_pb_1 = require("../../annotations_pb");
var codes_pb_1 = require("./codes_pb");
var valuesets_pb_1 = require("./valuesets_pb");
/**
 * Describes the file proto/google/fhir/proto/r4/core/datatypes.proto.
 */
exports.file_proto_google_fhir_proto_r4_core_datatypes = (0, codegenv1_1.fileDesc)("Ci9wcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL2RhdGF0eXBlcy5wcm90bxITZ29vZ2xlLmZoaXIucjQuY29yZSKKCQoHQWRkcmVzcxInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjEKA3VzZRgDIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQWRkcmVzcy5Vc2VDb2RlEjMKBHR5cGUYBCABKAsyJS5nb29nbGUuZmhpci5yNC5jb3JlLkFkZHJlc3MuVHlwZUNvZGUSKQoEdGV4dBgFIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEikKBGxpbmUYBiADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIpCgRjaXR5GAcgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLQoIZGlzdHJpY3QYCCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIqCgVzdGF0ZRgJIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjAKC3Bvc3RhbF9jb2RlGAogASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLAoHY291bnRyeRgLIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEisKBnBlcmlvZBgMIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuUGVyaW9kGocCCgdVc2VDb2RlEjgKBXZhbHVlGAEgASgOMikuZ29vZ2xlLmZoaXIucjQuY29yZS5BZGRyZXNzVXNlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmaK+YOyBShodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FkZHJlc3MtdXNlwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUaigIKCFR5cGVDb2RlEjkKBXZhbHVlGAEgASgOMiouZ29vZ2xlLmZoaXIucjQuY29yZS5BZGRyZXNzVHlwZUNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpnivmDsgUpaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9hZGRyZXNzLXR5cGXAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTo7wJ/jtgUCsv7klwYvaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0FkZHJlc3Mi0gYKA0FnZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKBXZhbHVlGAMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEjsKCmNvbXBhcmF0b3IYBCABKAsyJy5nb29nbGUuZmhpci5yNC5jb3JlLkFnZS5Db21wYXJhdG9yQ29kZRIpCgR1bml0GAUgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSKAoGc3lzdGVtGAYgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmkSJwoEY29kZRgHIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRqeAgoOQ29tcGFyYXRvckNvZGUSQAoFdmFsdWUYASABKA4yMS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5Q29tcGFyYXRvckNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpuivmDsgUwaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9xdWFudGl0eS1jb21wYXJhdG9ywJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU65QHAn+O2BQKy/uSXBitodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQWdlmoaToAiCAShjb2RlLmV4aXN0cygpIG9yIHZhbHVlLmVtcHR5KCkpIGFuZCAoc3lzdGVtLmVtcHR5KCkgb3Igc3lzdGVtID0gJXVjdW0pIGFuZCAodmFsdWUuZW1wdHkoKSBvciB2YWx1ZS5oYXNWYWx1ZSgpLm5vdCgpIG9yIHZhbHVlID4gMCmahpOgCB9jb2RlLmVtcHR5KCkgb3Igc3lzdGVtLmV4aXN0cygpIpkECgpBbm5vdGF0aW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SNwoGYXV0aG9yGAMgASgLMicuZ29vZ2xlLmZoaXIucjQuY29yZS5Bbm5vdGF0aW9uLkF1dGhvclgSKwoEdGltZRgEIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWUSMwoEdGV4dBgFIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuTWFya2Rvd25CBvDQh+sEARrTAQoHQXV0aG9yWBJ5CglyZWZlcmVuY2UYASABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUJE8v/8wgYMUHJhY3RpdGlvbmVy8v/8wgYHUGF0aWVudPL//MIGDVJlbGF0ZWRQZXJzb27y//zCBgxPcmdhbml6YXRpb25IABI7CgxzdHJpbmdfdmFsdWUYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0gAUgZzdHJpbmc6BqCDg+gGAUIICgZjaG9pY2U6PsCf47YFArL+5JcGMmh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Bbm5vdGF0aW9uIscGCgpBdHRhY2htZW50EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SRQoMY29udGVudF90eXBlGAMgASgLMi8uZ29vZ2xlLmZoaXIucjQuY29yZS5BdHRhY2htZW50LkNvbnRlbnRUeXBlQ29kZRIrCghsYW5ndWFnZRgEIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRIvCgRkYXRhGAUgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5CYXNlNjRCaW5hcnkSJQoDdXJsGAYgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmwSLgoEc2l6ZRgHIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuVW5zaWduZWRJbnQSLwoEaGFzaBgIIAEoCzIhLmdvb2dsZS5maGlyLnI0LmNvcmUuQmFzZTY0QmluYXJ5EioKBXRpdGxlGAkgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLwoIY3JlYXRpb24YCiABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVUaW1lGugBCg9Db250ZW50VHlwZUNvZGUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhINCgV2YWx1ZRgEIAEoCTpkivmDsgUmaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9taW1ldHlwZXPAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZUoECAEQAjpowJ/jtgUCsv7klwYyaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0F0dGFjaG1lbnSahpOgCCRkYXRhLmVtcHR5KCkgb3IgY29udGVudFR5cGUuZXhpc3RzKCki9AEKD0JhY2tib25lRWxlbWVudBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOknAn+O2BQKy/uSXBjdodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQmFja2JvbmVFbGVtZW508OzF5gYBIt4BCgxCYXNlNjRCaW5hcnkSDQoFdmFsdWUYASABKAwSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpjwJ/jtgUBkvqijAYdKFxzKihbMC05YS16QS1aXCsvPV0pezR9XHMqKSuy/uSXBjRodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vYmFzZTY0QmluYXJ5IsEBCgdCb29sZWFuEg0KBXZhbHVlGAEgASgIEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246S8Cf47YFAZL6oowGCnRydWV8ZmFsc2Wy/uSXBi9odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vYm9vbGVhbiK+AQoJQ2Fub25pY2FsEg0KBXZhbHVlGAEgASgJEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246RsCf47YFAZL6oowGA1xTKrL+5JcGMWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jYW5vbmljYWwiwgEKBENvZGUSDQoFdmFsdWUYASABKAkSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpPwJ/jtgUBkvqijAYRW15cc10rKFxzW15cc10rKSqy/uSXBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZSKKAgoPQ29kZWFibGVDb25jZXB0EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SKwoGY29kaW5nGAMgAygLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RpbmcSKQoEdGV4dBgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nOkPAn+O2BQKy/uSXBjdodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQ29kZWFibGVDb25jZXB0IoQDCgZDb2RpbmcSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIoCgZzeXN0ZW0YAyABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRIsCgd2ZXJzaW9uGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSJwoEY29kZRgFIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRIsCgdkaXNwbGF5GAYgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMwoNdXNlcl9zZWxlY3RlZBgHIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQm9vbGVhbjo6wJ/jtgUCsv7klwYuaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvZGluZyKNAgoNQ29udGFjdERldGFpbBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEikKBG5hbWUYAyABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIyCgd0ZWxlY29tGAQgAygLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250YWN0UG9pbnQ6QcCf47YFArL+5JcGNWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db250YWN0RGV0YWlsIoQICgxDb250YWN0UG9pbnQSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI8CgZzeXN0ZW0YAyABKAsyLC5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3RQb2ludC5TeXN0ZW1Db2RlEioKBXZhbHVlGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSNgoDdXNlGAUgASgLMikuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250YWN0UG9pbnQuVXNlQ29kZRIuCgRyYW5rGAYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludBIrCgZwZXJpb2QYByABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZBqbAgoKU3lzdGVtQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udGFjdFBvaW50U3lzdGVtQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm+K+YOyBTFodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnRhY3QtcG9pbnQtc3lzdGVtwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUakgIKB1VzZUNvZGUSPQoFdmFsdWUYASABKA4yLi5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3RQb2ludFVzZUNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpsivmDsgUuaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9jb250YWN0LXBvaW50LXVzZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlOmbAn+O2BQKy/uSXBjRodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQ29udGFjdFBvaW50moaToAggdmFsdWUuZW1wdHkoKSBvciBzeXN0ZW0uZXhpc3RzKCki6AQKC0NvbnRyaWJ1dG9yEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SPwoEdHlwZRgDIAEoCzIpLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udHJpYnV0b3IuVHlwZUNvZGVCBvDQh+sEARIxCgRuYW1lGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARIzCgdjb250YWN0GAUgAygLMiIuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250YWN0RGV0YWlsGpICCghUeXBlQ29kZRI9CgV2YWx1ZRgBIAEoDjIuLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udHJpYnV0b3JUeXBlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmuK+YOyBS1odHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnRyaWJ1dG9yLXR5cGXAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTo/wJ/jtgUCsv7klwYzaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvbnRyaWJ1dG9yIpQHCgVDb3VudBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKBXZhbHVlGAMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEj0KCmNvbXBhcmF0b3IYBCABKAsyKS5nb29nbGUuZmhpci5yNC5jb3JlLkNvdW50LkNvbXBhcmF0b3JDb2RlEikKBHVuaXQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIoCgZzeXN0ZW0YBiABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRInCgRjb2RlGAcgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlGp4CCg5Db21wYXJhdG9yQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlDb21wYXJhdG9yQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm6K+YOyBTBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3F1YW50aXR5LWNvbXBhcmF0b3LAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTqjAsCf47YFArL+5JcGLWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db3VudJqGk6AIvgEoY29kZS5leGlzdHMoKSBvciB2YWx1ZS5lbXB0eSgpKSBhbmQgKHN5c3RlbS5lbXB0eSgpIG9yIHN5c3RlbSA9ICV1Y3VtKSBhbmQgKGNvZGUuZW1wdHkoKSBvciBjb2RlID0gJzEnKSBhbmQgKHZhbHVlLmVtcHR5KCkgb3IgdmFsdWUuaGFzVmFsdWUoKS5ub3QoKSBvciB2YWx1ZS50b1N0cmluZygpLmNvbnRhaW5zKCcuJykubm90KCkpmoaToAgfY29kZS5lbXB0eSgpIG9yIHN5c3RlbS5leGlzdHMoKSKLEwoPRGF0YVJlcXVpcmVtZW50EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SQwoEdHlwZRgDIAEoCzItLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0YVJlcXVpcmVtZW50LlR5cGVDb2RlQgbw0IfrBAESLwoHcHJvZmlsZRgEIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuQ2Fub25pY2FsEj4KB3N1YmplY3QYBSABKAsyLS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudC5TdWJqZWN0WBIxCgxtdXN0X3N1cHBvcnQYBiADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxJECgtjb2RlX2ZpbHRlchgHIAMoCzIvLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0YVJlcXVpcmVtZW50LkNvZGVGaWx0ZXISRAoLZGF0ZV9maWx0ZXIYCCADKAsyLy5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudC5EYXRlRmlsdGVyEi8KBWxpbWl0GAkgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludBI3CgRzb3J0GAogAygLMikuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRhUmVxdWlyZW1lbnQuU29ydBqMAgoIVHlwZUNvZGUSPgoFdmFsdWUYASABKA4yLy5nb29nbGUuZmhpci5yNC5jb3JlLkZISVJBbGxUeXBlc1ZhbHVlU2V0LlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246ZIr5g7IFJmh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvYWxsLXR5cGVzwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUaoAEKCFN1YmplY3RYEkAKEGNvZGVhYmxlX2NvbmNlcHQYASABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEgAEkAKCXJlZmVyZW5jZRgCIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlQgvy//zCBgVHcm91cEgAOgagg4PoBgFCCAoGY2hvaWNlGtICCgpDb2RlRmlsdGVyEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SKQoEcGF0aBgDIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKDHNlYXJjaF9wYXJhbRgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCXZhbHVlX3NldBgFIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuQ2Fub25pY2FsEikKBGNvZGUYBiADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZzosmoaToAgmcGF0aC5leGlzdHMoKSB4b3Igc2VhcmNoUGFyYW0uZXhpc3RzKCka7gMKCkRhdGVGaWx0ZXISJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIpCgRwYXRoGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoMc2VhcmNoX3BhcmFtGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSRQoFdmFsdWUYBSABKAsyNi5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudC5EYXRlRmlsdGVyLlZhbHVlWBqwAQoGVmFsdWVYEjIKCWRhdGVfdGltZRgBIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWVIABItCgZwZXJpb2QYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZEgAEjEKCGR1cmF0aW9uGAMgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EdXJhdGlvbkgAOgagg4PoBgFCCAoGY2hvaWNlOiyahpOgCCZwYXRoLmV4aXN0cygpIHhvciBzZWFyY2hQYXJhbS5leGlzdHMoKRr/AwoEU29ydBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjEKBHBhdGgYAyABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0IG8NCH6wQBElIKCWRpcmVjdGlvbhgEIAEoCzI3Lmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0YVJlcXVpcmVtZW50LlNvcnQuRGlyZWN0aW9uQ29kZUIG8NCH6wQBGpMCCg1EaXJlY3Rpb25Db2RlEjsKBXZhbHVlGAEgASgOMiwuZ29vZ2xlLmZoaXIucjQuY29yZS5Tb3J0RGlyZWN0aW9uQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmmK+YOyBStodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3NvcnQtZGlyZWN0aW9uwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU6Q8Cf47YFArL+5JcGN2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9EYXRhUmVxdWlyZW1lbnQiqAMKBERhdGUSEAoIdmFsdWVfdXMYASABKAMSEAoIdGltZXpvbmUYAiABKAkSNgoJcHJlY2lzaW9uGAMgASgOMiMuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlLlByZWNpc2lvbhInCgJpZBgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgFIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uIkQKCVByZWNpc2lvbhIZChVQUkVDSVNJT05fVU5TUEVDSUZJRUQQABIICgRZRUFSEAESCQoFTU9OVEgQAhIHCgNEQVkQAzqhAcCf47YFAZL6oowGYyhbMC05XShbMC05XShbMC05XVsxLTldfFsxLTldMCl8WzEtOV0wMCl8WzEtOV0wMDApKC0oMFsxLTldfDFbMC0yXSkoLSgwWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pKT8pP7L+5JcGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9kYXRlIssECghEYXRlVGltZRIQCgh2YWx1ZV91cxgBIAEoAxIQCgh0aW1lem9uZRgCIAEoCRI6CglwcmVjaXNpb24YAyABKA4yJy5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVUaW1lLlByZWNpc2lvbhInCgJpZBgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgFIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uInIKCVByZWNpc2lvbhIZChVQUkVDSVNJT05fVU5TUEVDSUZJRUQQABIICgRZRUFSEAESCQoFTU9OVEgQAhIHCgNEQVkQAxIKCgZTRUNPTkQQBBIPCgtNSUxMSVNFQ09ORBAFEg8KC01JQ1JPU0VDT05EEAY6jgLAn+O2BQGS+qKMBssBKFswLTldKFswLTldKFswLTldWzEtOV18WzEtOV0wKXxbMS05XTAwKXxbMS05XTAwMCkoLSgwWzEtOV18MVswLTJdKSgtKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSkoVChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOihbMC01XVswLTldfDYwKShcLlswLTldKyk/KFp8KFwrfC0pKCgwWzAtOV18MVswLTNdKTpbMC01XVswLTldfDE0OjAwKSkpPyk/KT+y/uSXBjBodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vZGF0ZVRpbWUi5QEKB0RlY2ltYWwSDQoFdmFsdWUYASABKAkSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpvwJ/jtgUBkvqijAYuLT8oMHxbMS05XVswLTldKikoXC5bMC05XSspPyhbZUVdWystXT9bMC05XSspP7L+5JcGL2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9kZWNpbWFsIqUGCghEaXN0YW5jZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKBXZhbHVlGAMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEkAKCmNvbXBhcmF0b3IYBCABKAsyLC5nb29nbGUuZmhpci5yNC5jb3JlLkRpc3RhbmNlLkNvbXBhcmF0b3JDb2RlEikKBHVuaXQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIoCgZzeXN0ZW0YBiABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRInCgRjb2RlGAcgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlGp4CCg5Db21wYXJhdG9yQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlDb21wYXJhdG9yQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm6K+YOyBTBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3F1YW50aXR5LWNvbXBhcmF0b3LAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTquAcCf47YFArL+5JcGMGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9EaXN0YW5jZZqGk6AIRyhjb2RlLmV4aXN0cygpIG9yIHZhbHVlLmVtcHR5KCkpIGFuZCAoc3lzdGVtLmVtcHR5KCkgb3Igc3lzdGVtID0gJXVjdW0pmoaToAgfY29kZS5lbXB0eSgpIG9yIHN5c3RlbS5leGlzdHMoKSKhDQoGRG9zYWdlEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SLgoIc2VxdWVuY2UYBCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkludGVnZXISKQoEdGV4dBgFIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEkQKFmFkZGl0aW9uYWxfaW5zdHJ1Y3Rpb24YBiADKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBI4ChNwYXRpZW50X2luc3RydWN0aW9uGAcgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSKwoGdGltaW5nGAggASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1pbmcSOAoJYXNfbmVlZGVkGAkgASgLMiUuZ29vZ2xlLmZoaXIucjQuY29yZS5Eb3NhZ2UuQXNOZWVkZWRYEjIKBHNpdGUYCiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBIzCgVyb3V0ZRgLIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjQKBm1ldGhvZBgMIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0Ej4KDWRvc2VfYW5kX3JhdGUYDSADKAsyJy5nb29nbGUuZmhpci5yNC5jb3JlLkRvc2FnZS5Eb3NlQW5kUmF0ZRI3ChNtYXhfZG9zZV9wZXJfcGVyaW9kGA4gASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYXRpbxJIChttYXhfZG9zZV9wZXJfYWRtaW5pc3RyYXRpb24YDyABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5EkIKFW1heF9kb3NlX3Blcl9saWZldGltZRgQIAEoCzIjLmdvb2dsZS5maGlyLnI0LmNvcmUuU2ltcGxlUXVhbnRpdHkakAEKCUFzTmVlZGVkWBIvCgdib29sZWFuGAEgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5Cb29sZWFuSAASQAoQY29kZWFibGVfY29uY2VwdBgCIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0SAA6BqCDg+gGAUIICgZjaG9pY2UaxwQKC0Rvc2VBbmRSYXRlEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMgoEdHlwZRgDIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjsKBGRvc2UYBCABKAsyLS5nb29nbGUuZmhpci5yNC5jb3JlLkRvc2FnZS5Eb3NlQW5kUmF0ZS5Eb3NlWBI7CgRyYXRlGAUgASgLMi0uZ29vZ2xlLmZoaXIucjQuY29yZS5Eb3NhZ2UuRG9zZUFuZFJhdGUuUmF0ZVgafwoFRG9zZVgSKwoFcmFuZ2UYASABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLlJhbmdlSAASNwoIcXVhbnRpdHkYAiABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5SAA6BqCDg+gGAUIICgZjaG9pY2UarAEKBVJhdGVYEisKBXJhdGlvGAEgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYXRpb0gAEisKBXJhbmdlGAIgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAEjcKCHF1YW50aXR5GAMgASgLMiMuZ29vZ2xlLmZoaXIucjQuY29yZS5TaW1wbGVRdWFudGl0eUgAOgagg4PoBgFCCAoGY2hvaWNlOjrAn+O2BQKy/uSXBi5odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vRG9zYWdlIpkGCghEdXJhdGlvbhInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKBXZhbHVlGAMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEkAKCmNvbXBhcmF0b3IYBCABKAsyLC5nb29nbGUuZmhpci5yNC5jb3JlLkR1cmF0aW9uLkNvbXBhcmF0b3JDb2RlEikKBHVuaXQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIoCgZzeXN0ZW0YBiABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRInCgRjb2RlGAcgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlGp4CCg5Db21wYXJhdG9yQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlDb21wYXJhdG9yQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm6K+YOyBTBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3F1YW50aXR5LWNvbXBhcmF0b3LAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTqiAcCf47YFArL+5JcGMGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9EdXJhdGlvbpqGk6AIO2NvZGUuZXhpc3RzKCkgaW1wbGllcyAoKHN5c3RlbSA9ICV1Y3VtKSBhbmQgdmFsdWUuZXhpc3RzKCkpmoaToAgfY29kZS5lbXB0eSgpIG9yIHN5c3RlbS5leGlzdHMoKSKoAQoHRWxlbWVudBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOkHAn+O2BQKy/uSXBi9odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vRWxlbWVudPDsxeYGASLSnAEKEUVsZW1lbnREZWZpbml0aW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMQoEcGF0aBgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nQgbw0IfrBAESUQoOcmVwcmVzZW50YXRpb24YBSADKAsyOS5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLlJlcHJlc2VudGF0aW9uQ29kZRIvCgpzbGljZV9uYW1lGAYgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSOwoVc2xpY2VfaXNfY29uc3RyYWluaW5nGAcgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5Cb29sZWFuEioKBWxhYmVsGAggASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSKQoEY29kZRgJIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kaW5nEj8KB3NsaWNpbmcYCiABKAsyLi5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLlNsaWNpbmcSKgoFc2hvcnQYCyABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCgpkZWZpbml0aW9uGAwgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bhIuCgdjb21tZW50GA0gASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bhIzCgxyZXF1aXJlbWVudHMYDiABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLk1hcmtkb3duEioKBWFsaWFzGA8gAygLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLQoDbWluGBAgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5VbnNpZ25lZEludBJeCgNtYXgYESABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0I08r7ApAcuZW1wdHkoKSBvciAoJHRoaXMgPSAnKicpIG9yICh0b0ludGVnZXIoKSA+PSAwKRI5CgRiYXNlGBIgASgLMisuZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5CYXNlEjMKEWNvbnRlbnRfcmVmZXJlbmNlGBMgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmkSPAoEdHlwZRgUIAMoCzIuLmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uVHlwZVJlZhJLCg1kZWZhdWx0X3ZhbHVlGBUgASgLMjQuZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5EZWZhdWx0VmFsdWVYEjsKFG1lYW5pbmdfd2hlbl9taXNzaW5nGBYgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bhIyCg1vcmRlcl9tZWFuaW5nGBcgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSPAoFZml4ZWQYGCABKAsyLS5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLkZpeGVkWBJACgdwYXR0ZXJuGBkgASgLMi8uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5QYXR0ZXJuWBI/CgdleGFtcGxlGBogAygLMi4uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5FeGFtcGxlEkMKCW1pbl92YWx1ZRgbIAEoCzIwLmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uTWluVmFsdWVYEkMKCW1heF92YWx1ZRgcIAEoCzIwLmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uTWF4VmFsdWVYEjAKCm1heF9sZW5ndGgYHSABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkludGVnZXISKgoJY29uZGl0aW9uGB4gAygLMhcuZ29vZ2xlLmZoaXIucjQuY29yZS5JZBJFCgpjb25zdHJhaW50GB8gAygLMjEuZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5Db25zdHJhaW50EjIKDG11c3Rfc3VwcG9ydBggIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQm9vbGVhbhIxCgtpc19tb2RpZmllchghIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQm9vbGVhbhI3ChJpc19tb2RpZmllcl9yZWFzb24YIiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIwCgppc19zdW1tYXJ5GCMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5Cb29sZWFuElAKB2JpbmRpbmcYJCABKAsyPy5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLkVsZW1lbnREZWZpbml0aW9uQmluZGluZxI/CgdtYXBwaW5nGCUgAygLMi4uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5NYXBwaW5nGqoCChJSZXByZXNlbnRhdGlvbkNvZGUSRAoFdmFsdWUYASABKA4yNS5nb29nbGUuZmhpci5yNC5jb3JlLlByb3BlcnR5UmVwcmVzZW50YXRpb25Db2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246cor5g7IFNGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcHJvcGVydHktcmVwcmVzZW50YXRpb27An+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZRrSCQoHU2xpY2luZxInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uElMKDWRpc2NyaW1pbmF0b3IYAyADKAsyPC5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLlNsaWNpbmcuRGlzY3JpbWluYXRvchIwCgtkZXNjcmlwdGlvbhgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEi0KB29yZGVyZWQYBSABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW4STwoFcnVsZXMYBiABKAsyOC5nb29nbGUuZmhpci5yNC5jb3JlLkVsZW1lbnREZWZpbml0aW9uLlNsaWNpbmcuUnVsZXNDb2RlQgbw0IfrBAEalAQKDURpc2NyaW1pbmF0b3ISJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhJbCgR0eXBlGAMgASgLMkUuZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5TbGljaW5nLkRpc2NyaW1pbmF0b3IuVHlwZUNvZGVCBvDQh+sEARIxCgRwYXRoGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARqWAgoIVHlwZUNvZGUSPwoFdmFsdWUYASABKA4yMC5nb29nbGUuZmhpci5yNC5jb3JlLkRpc2NyaW1pbmF0b3JUeXBlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm2K+YOyBS9odHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2Rpc2NyaW1pbmF0b3ItdHlwZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlGpYCCglSdWxlc0NvZGUSOgoFdmFsdWUYASABKA4yKy5nb29nbGUuZmhpci5yNC5jb3JlLlNsaWNpbmdSdWxlc0NvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpxivmDsgUzaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXNvdXJjZS1zbGljaW5nLXJ1bGVzwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU6NJqGk6AILmRpc2NyaW1pbmF0b3IuZXhpc3RzKCkgb3IgZGVzY3JpcHRpb24uZXhpc3RzKCka/gEKBEJhc2USJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIxCgRwYXRoGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARI1CgNtaW4YBCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlVuc2lnbmVkSW50Qgbw0IfrBAESMAoDbWF4GAUgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARqGCQoHVHlwZVJlZhInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEi4KBGNvZGUYAyABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaUIG8NCH6wQBEi8KB3Byb2ZpbGUYBCADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbBI2Cg50YXJnZXRfcHJvZmlsZRgFIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuQ2Fub25pY2FsElMKC2FnZ3JlZ2F0aW9uGAYgAygLMj4uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5UeXBlUmVmLkFnZ3JlZ2F0aW9uQ29kZRJRCgp2ZXJzaW9uaW5nGAcgASgLMj0uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5UeXBlUmVmLlZlcnNpb25pbmdDb2RlGqICCg9BZ2dyZWdhdGlvbkNvZGUSPQoFdmFsdWUYASABKA4yLi5nb29nbGUuZmhpci5yNC5jb3JlLkFnZ3JlZ2F0aW9uTW9kZUNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjp0ivmDsgU2aHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9yZXNvdXJjZS1hZ2dyZWdhdGlvbi1tb2RlwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUapQIKDlZlcnNpb25pbmdDb2RlEkMKBXZhbHVlGAEgASgOMjQuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VWZXJzaW9uUnVsZXNDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246cor5g7IFNGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvcmVmZXJlbmNlLXZlcnNpb24tcnVsZXPAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTqQAZqGk6AIQ2FnZ3JlZ2F0aW9uLmVtcHR5KCkgb3IgKGNvZGUgPSAnUmVmZXJlbmNlJykgb3IgKGNvZGUgPSAnY2Fub25pY2FsJymahpOgCEEoY29kZT0nUmVmZXJlbmNlJyBvciBjb2RlID0gJ2Nhbm9uaWNhbCcpIG9yIHRhcmdldFByb2ZpbGUuZW1wdHkoKRrFFAoNRGVmYXVsdFZhbHVlWBI6Cg1iYXNlNjRfYmluYXJ5GAEgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5CYXNlNjRCaW5hcnlIABIvCgdib29sZWFuGAIgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5Cb29sZWFuSAASMwoJY2Fub25pY2FsGAMgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5DYW5vbmljYWxIABIpCgRjb2RlGAQgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlSAASKQoEZGF0ZRgFIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZUgAEjIKCWRhdGVfdGltZRgGIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWVIABIvCgdkZWNpbWFsGAcgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsSAASJQoCaWQYCCABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkSAASLwoHaW5zdGFudBgJIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW5zdGFudEgAEi8KB2ludGVnZXIYCiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkludGVnZXJIABIxCghtYXJrZG93bhgLIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuTWFya2Rvd25IABInCgNvaWQYDCABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLk9pZEgAEjgKDHBvc2l0aXZlX2ludBgNIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnRIABI7CgxzdHJpbmdfdmFsdWUYDiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0gAUgZzdHJpbmcSKQoEdGltZRgPIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltZUgAEjgKDHVuc2lnbmVkX2ludBgQIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuVW5zaWduZWRJbnRIABInCgN1cmkYESABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaUgAEicKA3VybBgSIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJsSAASKQoEdXVpZBgTIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuVXVpZEgAEi8KB2FkZHJlc3MYFCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkFkZHJlc3NIABInCgNhZ2UYFSABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLkFnZUgAEjUKCmFubm90YXRpb24YFiABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkFubm90YXRpb25IABI1CgphdHRhY2htZW50GBcgASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5BdHRhY2htZW50SAASQAoQY29kZWFibGVfY29uY2VwdBgYIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0SAASLQoGY29kaW5nGBkgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RpbmdIABI6Cg1jb250YWN0X3BvaW50GBogASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250YWN0UG9pbnRIABIrCgVjb3VudBgbIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuQ291bnRIABIxCghkaXN0YW5jZRgcIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGlzdGFuY2VIABIxCghkdXJhdGlvbhgdIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRHVyYXRpb25IABI0CgpodW1hbl9uYW1lGB4gASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5IdW1hbk5hbWVIABI1CgppZGVudGlmaWVyGB8gASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5JZGVudGlmaWVySAASKwoFbW9uZXkYICABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLk1vbmV5SAASLQoGcGVyaW9kGCEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5QZXJpb2RIABIxCghxdWFudGl0eRgiIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlIABIrCgVyYW5nZRgjIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuUmFuZ2VIABIrCgVyYXRpbxgkIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuUmF0aW9IABIzCglyZWZlcmVuY2UYJSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUgAEjgKDHNhbXBsZWRfZGF0YRgmIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuU2FtcGxlZERhdGFIABIzCglzaWduYXR1cmUYJyABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlNpZ25hdHVyZUgAEi0KBnRpbWluZxgoIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltaW5nSAASPAoOY29udGFjdF9kZXRhaWwYKSABKAsyIi5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3REZXRhaWxIABI3Cgtjb250cmlidXRvchgqIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udHJpYnV0b3JIABJAChBkYXRhX3JlcXVpcmVtZW50GCsgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRhUmVxdWlyZW1lbnRIABI1CgpleHByZXNzaW9uGCwgASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHByZXNzaW9uSAASSAoUcGFyYW1ldGVyX2RlZmluaXRpb24YLSABKAsyKC5nb29nbGUuZmhpci5yNC5jb3JlLlBhcmFtZXRlckRlZmluaXRpb25IABJAChByZWxhdGVkX2FydGlmYWN0GC4gASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWxhdGVkQXJ0aWZhY3RIABJEChJ0cmlnZ2VyX2RlZmluaXRpb24YLyABKAsyJi5nb29nbGUuZmhpci5yNC5jb3JlLlRyaWdnZXJEZWZpbml0aW9uSAASOgoNdXNhZ2VfY29udGV4dBgwIAEoCzIhLmdvb2dsZS5maGlyLnI0LmNvcmUuVXNhZ2VDb250ZXh0SAASLQoGZG9zYWdlGDEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Eb3NhZ2VIABIpCgRtZXRhGDIgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5NZXRhSAA6BqCDg+gGAUIICgZjaG9pY2UavhQKBkZpeGVkWBI6Cg1iYXNlNjRfYmluYXJ5GAEgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5CYXNlNjRCaW5hcnlIABIvCgdib29sZWFuGAIgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5Cb29sZWFuSAASMwoJY2Fub25pY2FsGAMgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5DYW5vbmljYWxIABIpCgRjb2RlGAQgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlSAASKQoEZGF0ZRgFIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZUgAEjIKCWRhdGVfdGltZRgGIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWVIABIvCgdkZWNpbWFsGAcgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsSAASJQoCaWQYCCABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkSAASLwoHaW5zdGFudBgJIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW5zdGFudEgAEi8KB2ludGVnZXIYCiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkludGVnZXJIABIxCghtYXJrZG93bhgLIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuTWFya2Rvd25IABInCgNvaWQYDCABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLk9pZEgAEjgKDHBvc2l0aXZlX2ludBgNIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnRIABI7CgxzdHJpbmdfdmFsdWUYDiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0gAUgZzdHJpbmcSKQoEdGltZRgPIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltZUgAEjgKDHVuc2lnbmVkX2ludBgQIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuVW5zaWduZWRJbnRIABInCgN1cmkYESABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaUgAEicKA3VybBgSIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJsSAASKQoEdXVpZBgTIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuVXVpZEgAEi8KB2FkZHJlc3MYFCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkFkZHJlc3NIABInCgNhZ2UYFSABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLkFnZUgAEjUKCmFubm90YXRpb24YFiABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkFubm90YXRpb25IABI1CgphdHRhY2htZW50GBcgASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5BdHRhY2htZW50SAASQAoQY29kZWFibGVfY29uY2VwdBgYIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0SAASLQoGY29kaW5nGBkgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RpbmdIABI6Cg1jb250YWN0X3BvaW50GBogASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250YWN0UG9pbnRIABIrCgVjb3VudBgbIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuQ291bnRIABIxCghkaXN0YW5jZRgcIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGlzdGFuY2VIABIxCghkdXJhdGlvbhgdIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRHVyYXRpb25IABI0CgpodW1hbl9uYW1lGB4gASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5IdW1hbk5hbWVIABI1CgppZGVudGlmaWVyGB8gASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5JZGVudGlmaWVySAASKwoFbW9uZXkYICABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLk1vbmV5SAASLQoGcGVyaW9kGCEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5QZXJpb2RIABIxCghxdWFudGl0eRgiIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlIABIrCgVyYW5nZRgjIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuUmFuZ2VIABIrCgVyYXRpbxgkIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuUmF0aW9IABIzCglyZWZlcmVuY2UYJSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUgAEjgKDHNhbXBsZWRfZGF0YRgmIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuU2FtcGxlZERhdGFIABIzCglzaWduYXR1cmUYJyABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlNpZ25hdHVyZUgAEi0KBnRpbWluZxgoIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltaW5nSAASPAoOY29udGFjdF9kZXRhaWwYKSABKAsyIi5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3REZXRhaWxIABI3Cgtjb250cmlidXRvchgqIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udHJpYnV0b3JIABJAChBkYXRhX3JlcXVpcmVtZW50GCsgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRhUmVxdWlyZW1lbnRIABI1CgpleHByZXNzaW9uGCwgASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHByZXNzaW9uSAASSAoUcGFyYW1ldGVyX2RlZmluaXRpb24YLSABKAsyKC5nb29nbGUuZmhpci5yNC5jb3JlLlBhcmFtZXRlckRlZmluaXRpb25IABJAChByZWxhdGVkX2FydGlmYWN0GC4gASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWxhdGVkQXJ0aWZhY3RIABJEChJ0cmlnZ2VyX2RlZmluaXRpb24YLyABKAsyJi5nb29nbGUuZmhpci5yNC5jb3JlLlRyaWdnZXJEZWZpbml0aW9uSAASOgoNdXNhZ2VfY29udGV4dBgwIAEoCzIhLmdvb2dsZS5maGlyLnI0LmNvcmUuVXNhZ2VDb250ZXh0SAASLQoGZG9zYWdlGDEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Eb3NhZ2VIABIpCgRtZXRhGDIgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5NZXRhSAA6BqCDg+gGAUIICgZjaG9pY2UawBQKCFBhdHRlcm5YEjoKDWJhc2U2NF9iaW5hcnkYASABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkJhc2U2NEJpbmFyeUgAEi8KB2Jvb2xlYW4YAiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW5IABIzCgljYW5vbmljYWwYAyABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbEgAEikKBGNvZGUYBCABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVIABIpCgRkYXRlGAUgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlSAASMgoJZGF0ZV90aW1lGAYgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZUgAEi8KB2RlY2ltYWwYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWxIABIlCgJpZBgIIAEoCzIXLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRIABIvCgdpbnN0YW50GAkgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5JbnN0YW50SAASLwoHaW50ZWdlchgKIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW50ZWdlckgAEjEKCG1hcmtkb3duGAsgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bkgAEicKA29pZBgMIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuT2lkSAASOAoMcG9zaXRpdmVfaW50GA0gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludEgAEjsKDHN0cmluZ192YWx1ZRgOIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nSABSBnN0cmluZxIpCgR0aW1lGA8gASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1lSAASOAoMdW5zaWduZWRfaW50GBAgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5VbnNpZ25lZEludEgAEicKA3VyaRgRIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpSAASJwoDdXJsGBIgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmxIABIpCgR1dWlkGBMgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5VdWlkSAASLwoHYWRkcmVzcxgUIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQWRkcmVzc0gAEicKA2FnZRgVIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuQWdlSAASNQoKYW5ub3RhdGlvbhgWIAEoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuQW5ub3RhdGlvbkgAEjUKCmF0dGFjaG1lbnQYFyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkF0dGFjaG1lbnRIABJAChBjb2RlYWJsZV9jb25jZXB0GBggASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHRIABItCgZjb2RpbmcYGSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZ0gAEjoKDWNvbnRhY3RfcG9pbnQYGiABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3RQb2ludEgAEisKBWNvdW50GBsgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5Db3VudEgAEjEKCGRpc3RhbmNlGBwgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EaXN0YW5jZUgAEjEKCGR1cmF0aW9uGB0gASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EdXJhdGlvbkgAEjQKCmh1bWFuX25hbWUYHiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkh1bWFuTmFtZUgAEjUKCmlkZW50aWZpZXIYHyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLklkZW50aWZpZXJIABIrCgVtb25leRggIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuTW9uZXlIABItCgZwZXJpb2QYISABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZEgAEjEKCHF1YW50aXR5GCIgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eUgAEisKBXJhbmdlGCMgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAEisKBXJhdGlvGCQgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYXRpb0gAEjMKCXJlZmVyZW5jZRglIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSAASOAoMc2FtcGxlZF9kYXRhGCYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5TYW1wbGVkRGF0YUgAEjMKCXNpZ25hdHVyZRgnIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuU2lnbmF0dXJlSAASLQoGdGltaW5nGCggASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1pbmdIABI8Cg5jb250YWN0X2RldGFpbBgpIAEoCzIiLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udGFjdERldGFpbEgAEjcKC2NvbnRyaWJ1dG9yGCogASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250cmlidXRvckgAEkAKEGRhdGFfcmVxdWlyZW1lbnQYKyABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudEgAEjUKCmV4cHJlc3Npb24YLCABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkV4cHJlc3Npb25IABJIChRwYXJhbWV0ZXJfZGVmaW5pdGlvbhgtIAEoCzIoLmdvb2dsZS5maGlyLnI0LmNvcmUuUGFyYW1ldGVyRGVmaW5pdGlvbkgAEkAKEHJlbGF0ZWRfYXJ0aWZhY3QYLiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLlJlbGF0ZWRBcnRpZmFjdEgAEkQKEnRyaWdnZXJfZGVmaW5pdGlvbhgvIAEoCzImLmdvb2dsZS5maGlyLnI0LmNvcmUuVHJpZ2dlckRlZmluaXRpb25IABI6Cg11c2FnZV9jb250ZXh0GDAgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Vc2FnZUNvbnRleHRIABItCgZkb3NhZ2UYMSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkRvc2FnZUgAEikKBG1ldGEYMiABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLk1ldGFIADoGoIOD6AYBQggKBmNob2ljZRqoFgoHRXhhbXBsZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjIKBWxhYmVsGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARJMCgV2YWx1ZRgEIAEoCzI1Lmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uRXhhbXBsZS5WYWx1ZVhCBvDQh+sEARq+FAoGVmFsdWVYEjoKDWJhc2U2NF9iaW5hcnkYASABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkJhc2U2NEJpbmFyeUgAEi8KB2Jvb2xlYW4YAiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW5IABIzCgljYW5vbmljYWwYAyABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbEgAEikKBGNvZGUYBCABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVIABIpCgRkYXRlGAUgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlSAASMgoJZGF0ZV90aW1lGAYgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZUgAEi8KB2RlY2ltYWwYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWxIABIlCgJpZBgIIAEoCzIXLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRIABIvCgdpbnN0YW50GAkgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5JbnN0YW50SAASLwoHaW50ZWdlchgKIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW50ZWdlckgAEjEKCG1hcmtkb3duGAsgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bkgAEicKA29pZBgMIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuT2lkSAASOAoMcG9zaXRpdmVfaW50GA0gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludEgAEjsKDHN0cmluZ192YWx1ZRgOIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nSABSBnN0cmluZxIpCgR0aW1lGA8gASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1lSAASOAoMdW5zaWduZWRfaW50GBAgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5VbnNpZ25lZEludEgAEicKA3VyaRgRIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpSAASJwoDdXJsGBIgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmxIABIpCgR1dWlkGBMgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5VdWlkSAASLwoHYWRkcmVzcxgUIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQWRkcmVzc0gAEicKA2FnZRgVIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuQWdlSAASNQoKYW5ub3RhdGlvbhgWIAEoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuQW5ub3RhdGlvbkgAEjUKCmF0dGFjaG1lbnQYFyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkF0dGFjaG1lbnRIABJAChBjb2RlYWJsZV9jb25jZXB0GBggASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHRIABItCgZjb2RpbmcYGSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZ0gAEjoKDWNvbnRhY3RfcG9pbnQYGiABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3RQb2ludEgAEisKBWNvdW50GBsgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5Db3VudEgAEjEKCGRpc3RhbmNlGBwgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EaXN0YW5jZUgAEjEKCGR1cmF0aW9uGB0gASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EdXJhdGlvbkgAEjQKCmh1bWFuX25hbWUYHiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkh1bWFuTmFtZUgAEjUKCmlkZW50aWZpZXIYHyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLklkZW50aWZpZXJIABIrCgVtb25leRggIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuTW9uZXlIABItCgZwZXJpb2QYISABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZEgAEjEKCHF1YW50aXR5GCIgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eUgAEisKBXJhbmdlGCMgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAEisKBXJhdGlvGCQgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYXRpb0gAEjMKCXJlZmVyZW5jZRglIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSAASOAoMc2FtcGxlZF9kYXRhGCYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5TYW1wbGVkRGF0YUgAEjMKCXNpZ25hdHVyZRgnIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuU2lnbmF0dXJlSAASLQoGdGltaW5nGCggASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1pbmdIABI8Cg5jb250YWN0X2RldGFpbBgpIAEoCzIiLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udGFjdERldGFpbEgAEjcKC2NvbnRyaWJ1dG9yGCogASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250cmlidXRvckgAEkAKEGRhdGFfcmVxdWlyZW1lbnQYKyABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudEgAEjUKCmV4cHJlc3Npb24YLCABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkV4cHJlc3Npb25IABJIChRwYXJhbWV0ZXJfZGVmaW5pdGlvbhgtIAEoCzIoLmdvb2dsZS5maGlyLnI0LmNvcmUuUGFyYW1ldGVyRGVmaW5pdGlvbkgAEkAKEHJlbGF0ZWRfYXJ0aWZhY3QYLiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLlJlbGF0ZWRBcnRpZmFjdEgAEkQKEnRyaWdnZXJfZGVmaW5pdGlvbhgvIAEoCzImLmdvb2dsZS5maGlyLnI0LmNvcmUuVHJpZ2dlckRlZmluaXRpb25IABI6Cg11c2FnZV9jb250ZXh0GDAgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Vc2FnZUNvbnRleHRIABItCgZkb3NhZ2UYMSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkRvc2FnZUgAEikKBG1ldGEYMiABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLk1ldGFIADoGoIOD6AYBQggKBmNob2ljZRrhAwoJTWluVmFsdWVYEikKBGRhdGUYASABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVIABIyCglkYXRlX3RpbWUYAiABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVUaW1lSAASLwoHaW5zdGFudBgDIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW5zdGFudEgAEikKBHRpbWUYBCABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLlRpbWVIABIvCgdkZWNpbWFsGAUgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsSAASLwoHaW50ZWdlchgGIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW50ZWdlckgAEjgKDHBvc2l0aXZlX2ludBgHIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnRIABI4Cgx1bnNpZ25lZF9pbnQYCCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlVuc2lnbmVkSW50SAASMQoIcXVhbnRpdHkYCSABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5SAA6BqCDg+gGAUIICgZjaG9pY2Ua4QMKCU1heFZhbHVlWBIpCgRkYXRlGAEgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlSAASMgoJZGF0ZV90aW1lGAIgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZUgAEi8KB2luc3RhbnQYAyABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkluc3RhbnRIABIpCgR0aW1lGAQgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1lSAASLwoHZGVjaW1hbBgFIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuRGVjaW1hbEgAEi8KB2ludGVnZXIYBiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkludGVnZXJIABI4Cgxwb3NpdGl2ZV9pbnQYByABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlBvc2l0aXZlSW50SAASOAoMdW5zaWduZWRfaW50GAggASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5VbnNpZ25lZEludEgAEjEKCHF1YW50aXR5GAkgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eUgAOgagg4PoBgFCCAoGY2hvaWNlGp4GCgpDb25zdHJhaW50EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SLAoDa2V5GAMgASgLMhcuZ29vZ2xlLmZoaXIucjQuY29yZS5JZEIG8NCH6wQBEjEKDHJlcXVpcmVtZW50cxgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nElgKCHNldmVyaXR5GAUgASgLMj4uZ29vZ2xlLmZoaXIucjQuY29yZS5FbGVtZW50RGVmaW5pdGlvbi5Db25zdHJhaW50LlNldmVyaXR5Q29kZUIG8NCH6wQBEjIKBWh1bWFuGAYgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARIvCgpleHByZXNzaW9uGAcgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSKgoFeHBhdGgYCCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIuCgZzb3VyY2UYCSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbBqcAgoMU2V2ZXJpdHlDb2RlEkAKBXZhbHVlGAEgASgOMjEuZ29vZ2xlLmZoaXIucjQuY29yZS5Db25zdHJhaW50U2V2ZXJpdHlDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246bor5g7IFMGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uc3RyYWludC1zZXZlcml0ecCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlOhmar66kCxNleHByZXNzaW9uLmV4aXN0cygpGtsFChhFbGVtZW50RGVmaW5pdGlvbkJpbmRpbmcSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhJmCghzdHJlbmd0aBgDIAEoCzJMLmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uRWxlbWVudERlZmluaXRpb25CaW5kaW5nLlN0cmVuZ3RoQ29kZUIG8NCH6wQBEjAKC2Rlc2NyaXB0aW9uGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJdmFsdWVfc2V0GAUgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5DYW5vbmljYWwalgIKDFN0cmVuZ3RoQ29kZRI9CgV2YWx1ZRgBIAEoDjIuLmdvb2dsZS5maGlyLnI0LmNvcmUuQmluZGluZ1N0cmVuZ3RoQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmuK+YOyBS1odHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2JpbmRpbmctc3RyZW5ndGjAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTp9moaToAh3dmFsdWVTZXQuZXhpc3RzKCkgaW1wbGllcyAodmFsdWVTZXQuc3RhcnRzV2l0aCgnaHR0cDonKSBvciB2YWx1ZVNldC5zdGFydHNXaXRoKCdodHRwcycpIG9yIHZhbHVlU2V0LnN0YXJ0c1dpdGgoJ3VybjonKSkarwQKB01hcHBpbmcSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIxCghpZGVudGl0eRgDIAEoCzIXLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRCBvDQh+sEARJNCghsYW5ndWFnZRgEIAEoCzI7Lmdvb2dsZS5maGlyLnI0LmNvcmUuRWxlbWVudERlZmluaXRpb24uTWFwcGluZy5MYW5ndWFnZUNvZGUSMAoDbWFwGAUgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdCBvDQh+sEARIsCgdjb21tZW50GAYgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmca5QEKDExhbmd1YWdlQ29kZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEg0KBXZhbHVlGAQgASgJOmSK+YOyBSZodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21pbWV0eXBlc8Cf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlSgQIARACOtwIwJ/jtgUCsv7klwY5aHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VsZW1lbnREZWZpbml0aW9umoaToAhUbWluLmVtcHR5KCkgb3IgbWF4LmVtcHR5KCkgb3IgKG1heCA9ICcqJykgb3IgaWlmKG1heCAhPSAnKicsIG1pbiA8PSBtYXgudG9JbnRlZ2VyKCkpmoaToAjRAWNvbnRlbnRSZWZlcmVuY2UuZW1wdHkoKSBvciAodHlwZS5lbXB0eSgpIGFuZCBkZWZhdWx0VmFsdWUuZW1wdHkoKSBhbmQgZml4ZWQuZW1wdHkoKSBhbmQgcGF0dGVybi5lbXB0eSgpIGFuZCBleGFtcGxlLmVtcHR5KCkgYW5kIG1pblZhbHVlLmVtcHR5KCkgYW5kIG1heFZhbHVlLmVtcHR5KCkgYW5kIG1heExlbmd0aC5lbXB0eSgpIGFuZCBiaW5kaW5nLmVtcHR5KCkpmoaToAglZml4ZWQuZW1wdHkoKSBvciAodHlwZS5jb3VudCgpICA8PSAxKZqGk6AIJnBhdHRlcm4uZW1wdHkoKSBvciAodHlwZS5jb3VudCgpIDw9IDEpmoaToAggcGF0dGVybi5lbXB0eSgpIG9yIGZpeGVkLmVtcHR5KCmahpOgCLwBYmluZGluZy5lbXB0eSgpIG9yIHR5cGUuY29kZS5lbXB0eSgpIG9yIHR5cGUuc2VsZWN0KChjb2RlID0gJ2NvZGUnKSBvciAoY29kZSA9ICdDb2RpbmcnKSBvciAoY29kZT0nQ29kZWFibGVDb25jZXB0Jykgb3IgKGNvZGUgPSAnUXVhbnRpdHknKSBvciAoY29kZSA9ICdzdHJpbmcnKSBvciAoY29kZSA9ICd1cmknKSkuZXhpc3RzKCmahpOgCB50eXBlLnNlbGVjdChjb2RlKS5pc0Rpc3RpbmN0KCmahpOgCCNjb25zdHJhaW50LnNlbGVjdChrZXkpLmlzRGlzdGluY3QoKZqGk6AIMmRlZmF1bHRWYWx1ZS5lbXB0eSgpIG9yIG1lYW5pbmdXaGVuTWlzc2luZy5lbXB0eSgpmoaToAhIc2xpY2VOYW1lLmVtcHR5KCkgb3Igc2xpY2VOYW1lLm1hdGNoZXMoJ15bYS16QS1aMC05XFwvXFwtX1xcW1xcXVxcQF0rJCcpmoaToAhGKGlzTW9kaWZpZXIuZXhpc3RzKCkgYW5kIGlzTW9kaWZpZXIpIGltcGxpZXMgaXNNb2RpZmllclJlYXNvbi5leGlzdHMoKZqGk6AIN3NsaWNlSXNDb25zdHJhaW5pbmcuZXhpc3RzKCkgaW1wbGllcyBzbGljZU5hbWUuZXhpc3RzKCmar66kC0NwYXRoLm1hdGNoZXMoJ1tBLVphLXpdW0EtWmEtejAtOV0qKFxcLlthLXpdW0EtWmEtejAtOV0qKFxcW3hdKT8pKicpIsMDCgpFeHByZXNzaW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMAoLZGVzY3JpcHRpb24YAyABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIlCgRuYW1lGAQgASgLMhcuZ29vZ2xlLmZoaXIucjQuY29yZS5JZBIzCghsYW5ndWFnZRgFIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZUIG8NCH6wQBEi8KCmV4cHJlc3Npb24YBiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIrCglyZWZlcmVuY2UYByABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaTptwJ/jtgUCsv7klwYyaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0V4cHJlc3Npb26ahpOgCClleHByZXNzaW9uLmV4aXN0cygpIG9yIHJlZmVyZW5jZS5leGlzdHMoKSKhFgoJRXh0ZW5zaW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SLQoDdXJsGAIgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmlCBvDQh+sEARI0CgV2YWx1ZRgEIAEoCzIlLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uLlZhbHVlWBqTFAoGVmFsdWVYEjoKDWJhc2U2NF9iaW5hcnkYASABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkJhc2U2NEJpbmFyeUgAEi8KB2Jvb2xlYW4YAiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW5IABIzCgljYW5vbmljYWwYAyABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbEgAEikKBGNvZGUYBCABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVIABIpCgRkYXRlGAUgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlSAASMgoJZGF0ZV90aW1lGAYgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZUgAEi8KB2RlY2ltYWwYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWxIABIlCgJpZBgIIAEoCzIXLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRIABIvCgdpbnN0YW50GAkgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5JbnN0YW50SAASLwoHaW50ZWdlchgKIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW50ZWdlckgAEjEKCG1hcmtkb3duGAsgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5NYXJrZG93bkgAEicKA29pZBgMIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuT2lkSAASOAoMcG9zaXRpdmVfaW50GA0gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludEgAEjsKDHN0cmluZ192YWx1ZRgOIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nSABSBnN0cmluZxIpCgR0aW1lGA8gASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1lSAASOAoMdW5zaWduZWRfaW50GBAgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5VbnNpZ25lZEludEgAEicKA3VyaRgRIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpSAASJwoDdXJsGBIgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmxIABIpCgR1dWlkGBMgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5VdWlkSAASLwoHYWRkcmVzcxgUIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQWRkcmVzc0gAEicKA2FnZRgVIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuQWdlSAASNQoKYW5ub3RhdGlvbhgWIAEoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuQW5ub3RhdGlvbkgAEjUKCmF0dGFjaG1lbnQYFyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkF0dGFjaG1lbnRIABJAChBjb2RlYWJsZV9jb25jZXB0GBggASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHRIABItCgZjb2RpbmcYGSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZ0gAEjoKDWNvbnRhY3RfcG9pbnQYGiABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnRhY3RQb2ludEgAEisKBWNvdW50GBsgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5Db3VudEgAEjEKCGRpc3RhbmNlGBwgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EaXN0YW5jZUgAEjEKCGR1cmF0aW9uGB0gASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EdXJhdGlvbkgAEjQKCmh1bWFuX25hbWUYHiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkh1bWFuTmFtZUgAEjUKCmlkZW50aWZpZXIYHyABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLklkZW50aWZpZXJIABIrCgVtb25leRggIAEoCzIaLmdvb2dsZS5maGlyLnI0LmNvcmUuTW9uZXlIABItCgZwZXJpb2QYISABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZEgAEjEKCHF1YW50aXR5GCIgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eUgAEisKBXJhbmdlGCMgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAEisKBXJhdGlvGCQgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYXRpb0gAEjMKCXJlZmVyZW5jZRglIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSAASOAoMc2FtcGxlZF9kYXRhGCYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5TYW1wbGVkRGF0YUgAEjMKCXNpZ25hdHVyZRgnIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuU2lnbmF0dXJlSAASLQoGdGltaW5nGCggASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1pbmdIABI8Cg5jb250YWN0X2RldGFpbBgpIAEoCzIiLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29udGFjdERldGFpbEgAEjcKC2NvbnRyaWJ1dG9yGCogASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Db250cmlidXRvckgAEkAKEGRhdGFfcmVxdWlyZW1lbnQYKyABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGFSZXF1aXJlbWVudEgAEjUKCmV4cHJlc3Npb24YLCABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkV4cHJlc3Npb25IABJIChRwYXJhbWV0ZXJfZGVmaW5pdGlvbhgtIAEoCzIoLmdvb2dsZS5maGlyLnI0LmNvcmUuUGFyYW1ldGVyRGVmaW5pdGlvbkgAEkAKEHJlbGF0ZWRfYXJ0aWZhY3QYLiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLlJlbGF0ZWRBcnRpZmFjdEgAEkQKEnRyaWdnZXJfZGVmaW5pdGlvbhgvIAEoCzImLmdvb2dsZS5maGlyLnI0LmNvcmUuVHJpZ2dlckRlZmluaXRpb25IABI6Cg11c2FnZV9jb250ZXh0GDAgASgLMiEuZ29vZ2xlLmZoaXIucjQuY29yZS5Vc2FnZUNvbnRleHRIABItCgZkb3NhZ2UYMSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkRvc2FnZUgAOgagg4PoBgFCCAoGY2hvaWNlOj3An+O2BQKy/uSXBjFodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vRXh0ZW5zaW9uIuoFCglIdW1hbk5hbWUSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIzCgN1c2UYAyABKAsyJi5nb29nbGUuZmhpci5yNC5jb3JlLkh1bWFuTmFtZS5Vc2VDb2RlEikKBHRleHQYBCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIrCgZmYW1pbHkYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIqCgVnaXZlbhgGIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEisKBnByZWZpeBgHIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEisKBnN1ZmZpeBgIIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEisKBnBlcmlvZBgJIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuUGVyaW9kGoECCgdVc2VDb2RlEjUKBXZhbHVlGAEgASgOMiYuZ29vZ2xlLmZoaXIucjQuY29yZS5OYW1lVXNlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmOK+YOyBSVodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L25hbWUtdXNlwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU6PcCf47YFArL+5JcGMWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9IdW1hbk5hbWUiwgEKAklkEg0KBXZhbHVlGAEgASgJEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246UcCf47YFAZL6oowGFVtBLVphLXowLTlcLVwuXXsxLDY0fbL+5JcGKmh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9pZCLrBQoKSWRlbnRpZmllchInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjQKA3VzZRgDIAEoCzInLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRlbnRpZmllci5Vc2VDb2RlEjIKBHR5cGUYBCABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBIoCgZzeXN0ZW0YBSABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRIqCgV2YWx1ZRgGIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEisKBnBlcmlvZBgHIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuUGVyaW9kEkQKCGFzc2lnbmVyGAggASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCEvL//MIGDE9yZ2FuaXphdGlvbhqNAgoHVXNlQ29kZRI7CgV2YWx1ZRgBIAEoDjIsLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRlbnRpZmllclVzZUNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjppivmDsgUraHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9pZGVudGlmaWVyLXVzZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlOj7An+O2BQKy/uSXBjJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vSWRlbnRpZmllciKhBAoHSW5zdGFudBIQCgh2YWx1ZV91cxgBIAEoAxIQCgh0aW1lem9uZRgCIAEoCRI5CglwcmVjaXNpb24YAyABKA4yJi5nb29nbGUuZmhpci5yNC5jb3JlLkluc3RhbnQuUHJlY2lzaW9uEicKAmlkGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAUgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24iVAoJUHJlY2lzaW9uEhkKFVBSRUNJU0lPTl9VTlNQRUNJRklFRBAAEgoKBlNFQ09ORBABEg8KC01JTExJU0VDT05EEAISDwoLTUlDUk9TRUNPTkQQAzqEAsCf47YFAZL6oowGwgEoWzAtOV0oWzAtOV0oWzAtOV1bMS05XXxbMS05XTApfFsxLTldMDApfFsxLTldMDAwKS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMS0yXVswLTldfDNbMC0xXSlUKFswMV1bMC05XXwyWzAtM10pOlswLTVdWzAtOV06KFswLTVdWzAtOV18NjApKFwuWzAtOV0rKT8oWnwoXCt8LSkoKDBbMC05XXwxWzAtM10pOlswLTVdWzAtOV18MTQ6MDApKbL+5JcGL2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9pbnN0YW50IswBCgdJbnRlZ2VyEg0KBXZhbHVlGAEgASgREicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246VsCf47YFAZL6oowGFS0/KFswXXwoWzEtOV1bMC05XSopKbL+5JcGL2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9pbnRlZ2VyIsUBCghNYXJrZG93bhINCgV2YWx1ZRgBIAEoCRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOk7An+O2BQGS+qKMBgxbIFxyXG5cdFxTXSuy/uSXBjBodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vbWFya2Rvd24ilQQKD01hcmtldGluZ1N0YXR1cxInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEj0KB2NvdW50cnkYBCABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEIG8NCH6wQBEjoKDGp1cmlzZGljdGlvbhgFIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjwKBnN0YXR1cxgGIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0Qgbw0IfrBAESNwoKZGF0ZV9yYW5nZRgHIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuUGVyaW9kQgbw0IfrBAESMwoMcmVzdG9yZV9kYXRlGAggASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZTpDwJ/jtgUCsv7klwY3aHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL01hcmtldGluZ1N0YXR1cyKxAwoETWV0YRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKCnZlcnNpb25faWQYAyABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkEjIKDGxhc3RfdXBkYXRlZBgEIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW5zdGFudBIoCgZzb3VyY2UYBSABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRIvCgdwcm9maWxlGAYgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5DYW5vbmljYWwSLQoIc2VjdXJpdHkYByADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZxIoCgN0YWcYCCADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZzo4wJ/jtgUCsv7klwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL01ldGEi7wMKBU1vbmV5EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SKwoFdmFsdWUYAyABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSOQoIY3VycmVuY3kYBCABKAsyJy5nb29nbGUuZmhpci5yNC5jb3JlLk1vbmV5LkN1cnJlbmN5Q29kZRrmAQoMQ3VycmVuY3lDb2RlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SDQoFdmFsdWUYBCABKAk6ZYr5g7IFJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY3VycmVuY2llc8Cf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlSgQIARACOjnAn+O2BQKy/uSXBi1odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vTW9uZXki+wYKDU1vbmV5UXVhbnRpdHkSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIrCgV2YWx1ZRgDIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuRGVjaW1hbBJFCgpjb21wYXJhdG9yGAQgASgLMjEuZ29vZ2xlLmZoaXIucjQuY29yZS5Nb25leVF1YW50aXR5LkNvbXBhcmF0b3JDb2RlEikKBHVuaXQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIoCgZzeXN0ZW0YBiABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRInCgRjb2RlGAcgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlGp4CCg5Db21wYXJhdG9yQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlDb21wYXJhdG9yQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm6K+YOyBTBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3F1YW50aXR5LWNvbXBhcmF0b3LAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTr6AcCf47YFApq1jpMGMGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9RdWFudGl0ebL+5JcGNWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Nb25leVF1YW50aXR5moaToAhYKGNvZGUuZXhpc3RzKCkgb3IgdmFsdWUuZW1wdHkoKSkgYW5kIChzeXN0ZW0uZW1wdHkoKSBvciBzeXN0ZW0gPSAndXJuOmlzbzpzdGQ6aXNvOjQyMTcnKZqGk6AIH2NvZGUuZW1wdHkoKSBvciBzeXN0ZW0uZXhpc3RzKCki1QQKCU5hcnJhdGl2ZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEkEKBnN0YXR1cxgDIAEoCzIpLmdvb2dsZS5maGlyLnI0LmNvcmUuTmFycmF0aXZlLlN0YXR1c0NvZGVCBvDQh+sEARJTCgNkaXYYBCABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLlhodG1sQirw0IfrBAHyvsCkBwxodG1sQ2hlY2tzKCnyvsCkBwxodG1sQ2hlY2tzKCkalAIKClN0YXR1c0NvZGUSPQoFdmFsdWUYASABKA4yLi5nb29nbGUuZmhpci5yNC5jb3JlLk5hcnJhdGl2ZVN0YXR1c0NvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjprivmDsgUtaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9uYXJyYXRpdmUtc3RhdHVzwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU6PcCf47YFArL+5JcGMWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9OYXJyYXRpdmUi0AEKA09pZBINCgV2YWx1ZRgBIAEoCRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOl7An+O2BQGS+qKMBiF1cm46b2lkOlswLTJdKFwuKDB8WzEtOV1bMC05XSopKSuy/uSXBitodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vb2lkIt0IChNQYXJhbWV0ZXJEZWZpbml0aW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SJwoEbmFtZRgDIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRJFCgN1c2UYBCABKAsyMC5nb29nbGUuZmhpci5yNC5jb3JlLlBhcmFtZXRlckRlZmluaXRpb24uVXNlQ29kZUIG8NCH6wQBEikKA21pbhgFIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW50ZWdlchIoCgNtYXgYBiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIyCg1kb2N1bWVudGF0aW9uGAcgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSRwoEdHlwZRgIIAEoCzIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUGFyYW1ldGVyRGVmaW5pdGlvbi5UeXBlQ29kZUIG8NCH6wQBEi8KB3Byb2ZpbGUYCSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkNhbm9uaWNhbBqeAgoHVXNlQ29kZRJDCgV2YWx1ZRgBIAEoDjI0Lmdvb2dsZS5maGlyLnI0LmNvcmUuT3BlcmF0aW9uUGFyYW1ldGVyVXNlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOnKK+YOyBTRodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L29wZXJhdGlvbi1wYXJhbWV0ZXItdXNlwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUajAIKCFR5cGVDb2RlEj4KBXZhbHVlGAEgASgOMi8uZ29vZ2xlLmZoaXIucjQuY29yZS5GSElSQWxsVHlwZXNWYWx1ZVNldC5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmSK+YOyBSZodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2FsbC10eXBlc8Cf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlOkfAn+O2BQKy/uSXBjtodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGFyYW1ldGVyRGVmaW5pdGlvbiLBAgoGUGVyaW9kEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SLAoFc3RhcnQYAyABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVUaW1lEioKA2VuZBgEIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWU6gAHAn+O2BQKy/uSXBi5odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUGVyaW9kmoaToAhAc3RhcnQuaGFzVmFsdWUoKS5ub3QoKSBvciBlbmQuaGFzVmFsdWUoKS5ub3QoKSBvciAoc3RhcnQgPD0gZW5kKSLSBAoKUG9wdWxhdGlvbhInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjEKA2FnZRgEIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9wdWxhdGlvbi5BZ2VYEjQKBmdlbmRlchgFIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjIKBHJhY2UYBiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBJFChdwaHlzaW9sb2dpY2FsX2NvbmRpdGlvbhgHIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0GocBCgRBZ2VYEisKBXJhbmdlGAEgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAEkAKEGNvZGVhYmxlX2NvbmNlcHQYAiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEgAOgagg4PoBgFCCAoGY2hvaWNlOj7An+O2BQKy/uSXBjJodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUG9wdWxhdGlvbiLKAQoLUG9zaXRpdmVJbnQSDQoFdmFsdWUYASABKA0SJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpQwJ/jtgUBkvqijAYLWzEtOV1bMC05XSqy/uSXBjNodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vcG9zaXRpdmVJbnQijAYKElByb2RDaGFyYWN0ZXJpc3RpYxInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEi0KBmhlaWdodBgEIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHkSLAoFd2lkdGgYBSABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5EiwKBWRlcHRoGAYgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eRItCgZ3ZWlnaHQYByABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5EjUKDm5vbWluYWxfdm9sdW1lGAggASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eRI4ChFleHRlcm5hbF9kaWFtZXRlchgJIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHkSKgoFc2hhcGUYCiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIqCgVjb2xvchgLIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEiwKB2ltcHJpbnQYDCADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIuCgVpbWFnZRgNIAMoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuQXR0YWNobWVudBI1CgdzY29yaW5nGA4gASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQ6RsCf47YFArL+5JcGOmh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Qcm9kQ2hhcmFjdGVyaXN0aWMi5wMKEFByb2R1Y3RTaGVsZkxpZmUSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIzCgppZGVudGlmaWVyGAQgASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5JZGVudGlmaWVyEjoKBHR5cGUYBSABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEIG8NCH6wQBEjUKBnBlcmlvZBgGIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlCBvDQh+sEARJNCh9zcGVjaWFsX3ByZWNhdXRpb25zX2Zvcl9zdG9yYWdlGAcgAygLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQ6RMCf47YFArL+5JcGOGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Qcm9kdWN0U2hlbGZMaWZlItcFCghRdWFudGl0eRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKBXZhbHVlGAMgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEkAKCmNvbXBhcmF0b3IYBCABKAsyLC5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5LkNvbXBhcmF0b3JDb2RlEikKBHVuaXQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIoCgZzeXN0ZW0YBiABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRInCgRjb2RlGAcgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlGp4CCg5Db21wYXJhdG9yQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHlDb21wYXJhdG9yQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm6K+YOyBTBodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3F1YW50aXR5LWNvbXBhcmF0b3LAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTphwJ/jtgUCsv7klwYwaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1F1YW50aXR5moaToAgfY29kZS5lbXB0eSgpIG9yIHN5c3RlbS5leGlzdHMoKSK1AgoFUmFuZ2USJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIwCgNsb3cYAyABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5EjEKBGhpZ2gYBCABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5OmvAn+O2BQKy/uSXBi1odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUmFuZ2WahpOgCCxsb3cuZW1wdHkoKSBvciBoaWdoLmVtcHR5KCkgb3IgKGxvdyA8PSBoaWdoKSLmAgoFUmF0aW8SJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIwCgludW1lcmF0b3IYAyABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5EjIKC2Rlbm9taW5hdG9yGAQgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eTqaAcCf47YFArL+5JcGLWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9SYXRpb5qGk6AIWyhudW1lcmF0b3IuZW1wdHkoKSB4b3IgZGVub21pbmF0b3IuZXhpc3RzKCkpIGFuZCAobnVtZXJhdG9yLmV4aXN0cygpIG9yIGV4dGVuc2lvbi5leGlzdHMoKSkisGkKCVJlZmVyZW5jZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEiYKBHR5cGUYAyABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRI0CgppZGVudGlmaWVyGJsBIAEoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRlbnRpZmllchItCgdkaXNwbGF5GJwBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEioKA3VyaRgEIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nSAASLwoIZnJhZ21lbnQYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZ0gAEkcKC3Jlc291cmNlX2lkGAYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIO8oK1kQcIUmVzb3VyY2VIABJFCgphY2NvdW50X2lkGAcgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIN8oK1kQcHQWNjb3VudEgAElwKFmFjdGl2aXR5X2RlZmluaXRpb25faWQYCCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhjygrWRBxJBY3Rpdml0eURlZmluaXRpb25IABJQChBhZHZlcnNlX2V2ZW50X2lkGAkgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIS8oK1kQcMQWR2ZXJzZUV2ZW50SAASXAoWYWxsZXJneV9pbnRvbGVyYW5jZV9pZBgKIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGPKCtZEHEkFsbGVyZ3lJbnRvbGVyYW5jZUgAEk0KDmFwcG9pbnRtZW50X2lkGAsgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIR8oK1kQcLQXBwb2ludG1lbnRIABJeChdhcHBvaW50bWVudF9yZXNwb25zZV9pZBgMIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGfKCtZEHE0FwcG9pbnRtZW50UmVzcG9uc2VIABJMCg5hdWRpdF9ldmVudF9pZBgNIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCEPKCtZEHCkF1ZGl0RXZlbnRIABJBCghiYXNpY19pZBgOIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCC/KCtZEHBUJhc2ljSAASQwoJYmluYXJ5X2lkGA8gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIM8oK1kQcGQmluYXJ5SAASbQofYmlvbG9naWNhbGx5X2Rlcml2ZWRfcHJvZHVjdF9pZBgQIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCIPKCtZEHGkJpb2xvZ2ljYWxseURlcml2ZWRQcm9kdWN0SAASUgoRYm9keV9zdHJ1Y3R1cmVfaWQYESABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1Cb2R5U3RydWN0dXJlSAASQwoJYnVuZGxlX2lkGBIgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIM8oK1kQcGQnVuZGxlSAASXgoXY2FwYWJpbGl0eV9zdGF0ZW1lbnRfaWQYEyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhnygrWRBxNDYXBhYmlsaXR5U3RhdGVtZW50SAASSAoMY2FyZV9wbGFuX2lkGBQgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIO8oK1kQcIQ2FyZVBsYW5IABJICgxjYXJlX3RlYW1faWQYFSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg7ygrWRBwhDYXJlVGVhbUgAElAKEGNhdGFsb2dfZW50cnlfaWQYFiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxDYXRhbG9nRW50cnlIABJMCg5jaGFyZ2VfaXRlbV9pZBgXIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCEPKCtZEHCkNoYXJnZUl0ZW1IABJhChljaGFyZ2VfaXRlbV9kZWZpbml0aW9uX2lkGBggASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIa8oK1kQcUQ2hhcmdlSXRlbURlZmluaXRpb25IABJBCghjbGFpbV9pZBgZIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCC/KCtZEHBUNsYWltSAASUgoRY2xhaW1fcmVzcG9uc2VfaWQYGiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1DbGFpbVJlc3BvbnNlSAASXAoWY2xpbmljYWxfaW1wcmVzc2lvbl9pZBgbIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGPKCtZEHEkNsaW5pY2FsSW1wcmVzc2lvbkgAEkwKDmNvZGVfc3lzdGVtX2lkGBwgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIQ8oK1kQcKQ29kZVN5c3RlbUgAElEKEGNvbW11bmljYXRpb25faWQYHSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1Db21tdW5pY2F0aW9uSAASYAoYY29tbXVuaWNhdGlvbl9yZXF1ZXN0X2lkGB4gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIa8oK1kQcUQ29tbXVuaWNhdGlvblJlcXVlc3RIABJiChljb21wYXJ0bWVudF9kZWZpbml0aW9uX2lkGB8gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIb8oK1kQcVQ29tcGFydG1lbnREZWZpbml0aW9uSAASTQoOY29tcG9zaXRpb25faWQYICABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhHygrWRBwtDb21wb3NpdGlvbkgAEkwKDmNvbmNlcHRfbWFwX2lkGCEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIQ8oK1kQcKQ29uY2VwdE1hcEgAEkkKDGNvbmRpdGlvbl9pZBgiIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCD/KCtZEHCUNvbmRpdGlvbkgAEkUKCmNvbnNlbnRfaWQYIyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg3ygrWRBwdDb25zZW50SAASRwoLY29udHJhY3RfaWQYJCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg7ygrWRBwhDb250cmFjdEgAEkcKC2NvdmVyYWdlX2lkGCUgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIO8oK1kQcIQ292ZXJhZ2VIABJtCh9jb3ZlcmFnZV9lbGlnaWJpbGl0eV9yZXF1ZXN0X2lkGCYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIg8oK1kQcaQ292ZXJhZ2VFbGlnaWJpbGl0eVJlcXVlc3RIABJvCiBjb3ZlcmFnZV9lbGlnaWJpbGl0eV9yZXNwb25zZV9pZBgnIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCIfKCtZEHG0NvdmVyYWdlRWxpZ2liaWxpdHlSZXNwb25zZUgAElIKEWRldGVjdGVkX2lzc3VlX2lkGCggASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNRGV0ZWN0ZWRJc3N1ZUgAEkMKCWRldmljZV9pZBgpIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDPKCtZEHBkRldmljZUgAElgKFGRldmljZV9kZWZpbml0aW9uX2lkGCogASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQRGV2aWNlRGVmaW5pdGlvbkgAElAKEGRldmljZV9tZXRyaWNfaWQYKyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxEZXZpY2VNZXRyaWNIABJSChFkZXZpY2VfcmVxdWVzdF9pZBgsIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCE/KCtZEHDURldmljZVJlcXVlc3RIABJdChdkZXZpY2VfdXNlX3N0YXRlbWVudF9pZBgtIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGPKCtZEHEkRldmljZVVzZVN0YXRlbWVudEgAElgKFGRpYWdub3N0aWNfcmVwb3J0X2lkGC4gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQRGlhZ25vc3RpY1JlcG9ydEgAElgKFGRvY3VtZW50X21hbmlmZXN0X2lkGC8gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQRG9jdW1lbnRNYW5pZmVzdEgAEloKFWRvY3VtZW50X3JlZmVyZW5jZV9pZBgwIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCF/KCtZEHEURvY3VtZW50UmVmZXJlbmNlSAASVAoSZG9tYWluX3Jlc291cmNlX2lkGDEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIU8oK1kQcORG9tYWluUmVzb3VyY2VIABJnChxlZmZlY3RfZXZpZGVuY2Vfc3ludGhlc2lzX2lkGDIgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEId8oK1kQcXRWZmZWN0RXZpZGVuY2VTeW50aGVzaXNIABJJCgxlbmNvdW50ZXJfaWQYMyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg/ygrWRBwlFbmNvdW50ZXJIABJHCgtlbmRwb2ludF9pZBg0IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDvKCtZEHCEVuZHBvaW50SAASWgoVZW5yb2xsbWVudF9yZXF1ZXN0X2lkGDUgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIX8oK1kQcRRW5yb2xsbWVudFJlcXVlc3RIABJcChZlbnJvbGxtZW50X3Jlc3BvbnNlX2lkGDYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIY8oK1kQcSRW5yb2xsbWVudFJlc3BvbnNlSAASUwoSZXBpc29kZV9vZl9jYXJlX2lkGDcgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNRXBpc29kZU9mQ2FyZUgAElYKE2V2ZW50X2RlZmluaXRpb25faWQYOCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhXygrWRBw9FdmVudERlZmluaXRpb25IABJHCgtldmlkZW5jZV9pZBg5IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDvKCtZEHCEV2aWRlbmNlSAASWAoUZXZpZGVuY2VfdmFyaWFibGVfaWQYOiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhbygrWRBxBFdmlkZW5jZVZhcmlhYmxlSAASVgoTZXhhbXBsZV9zY2VuYXJpb19pZBg7IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFfKCtZEHD0V4YW1wbGVTY2VuYXJpb0gAEmEKGWV4cGxhbmF0aW9uX29mX2JlbmVmaXRfaWQYPCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhrygrWRBxRFeHBsYW5hdGlvbk9mQmVuZWZpdEgAEl8KGGZhbWlseV9tZW1iZXJfaGlzdG9yeV9pZBg9IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGfKCtZEHE0ZhbWlseU1lbWJlckhpc3RvcnlIABI/CgdmbGFnX2lkGD4gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIK8oK1kQcERmxhZ0gAEj8KB2dvYWxfaWQYPyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQgrygrWRBwRHb2FsSAASVgoTZ3JhcGhfZGVmaW5pdGlvbl9pZBhAIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFfKCtZEHD0dyYXBoRGVmaW5pdGlvbkgAEkEKCGdyb3VwX2lkGEEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIL8oK1kQcFR3JvdXBIABJYChRndWlkYW5jZV9yZXNwb25zZV9pZBhCIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFvKCtZEHEEd1aWRhbmNlUmVzcG9uc2VIABJaChVoZWFsdGhjYXJlX3NlcnZpY2VfaWQYQyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhfygrWRBxFIZWFsdGhjYXJlU2VydmljZUgAElAKEGltYWdpbmdfc3R1ZHlfaWQYRCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxJbWFnaW5nU3R1ZHlIABJPCg9pbW11bml6YXRpb25faWQYRSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxJbW11bml6YXRpb25IABJkChppbW11bml6YXRpb25fZXZhbHVhdGlvbl9pZBhGIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCHPKCtZEHFkltbXVuaXphdGlvbkV2YWx1YXRpb25IABJsCh5pbW11bml6YXRpb25fcmVjb21tZW5kYXRpb25faWQYRyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQiDygrWRBxpJbW11bml6YXRpb25SZWNvbW1lbmRhdGlvbkgAEl4KF2ltcGxlbWVudGF0aW9uX2d1aWRlX2lkGEggASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIZ8oK1kQcTSW1wbGVtZW50YXRpb25HdWlkZUgAElIKEWluc3VyYW5jZV9wbGFuX2lkGEkgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNSW5zdXJhbmNlUGxhbkgAEkUKCmludm9pY2VfaWQYSiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg3ygrWRBwdJbnZvaWNlSAASRQoKbGlicmFyeV9pZBhLIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDfKCtZEHB0xpYnJhcnlIABJFCgpsaW5rYWdlX2lkGEwgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIN8oK1kQcHTGlua2FnZUgAEj8KB2xpc3RfaWQYTSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQgrygrWRBwRMaXN0SAASRwoLbG9jYXRpb25faWQYTiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg7ygrWRBwhMb2NhdGlvbkgAEkUKCm1lYXN1cmVfaWQYTyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg3ygrWRBwdNZWFzdXJlSAASUgoRbWVhc3VyZV9yZXBvcnRfaWQYUCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1NZWFzdXJlUmVwb3J0SAASQQoIbWVkaWFfaWQYUSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQgvygrWRBwVNZWRpYUgAEksKDW1lZGljYXRpb25faWQYUiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhDygrWRBwpNZWRpY2F0aW9uSAASaAocbWVkaWNhdGlvbl9hZG1pbmlzdHJhdGlvbl9pZBhTIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCHvKCtZEHGE1lZGljYXRpb25BZG1pbmlzdHJhdGlvbkgAElwKFm1lZGljYXRpb25fZGlzcGVuc2VfaWQYVCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhjygrWRBxJNZWRpY2F0aW9uRGlzcGVuc2VIABJeChdtZWRpY2F0aW9uX2tub3dsZWRnZV9pZBhVIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGfKCtZEHE01lZGljYXRpb25Lbm93bGVkZ2VIABJaChVtZWRpY2F0aW9uX3JlcXVlc3RfaWQYViABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhfygrWRBxFNZWRpY2F0aW9uUmVxdWVzdEgAEl4KF21lZGljYXRpb25fc3RhdGVtZW50X2lkGFcgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIZ8oK1kQcTTWVkaWNhdGlvblN0YXRlbWVudEgAElgKFG1lZGljaW5hbF9wcm9kdWN0X2lkGFggASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQTWVkaWNpbmFsUHJvZHVjdEgAEnMKIm1lZGljaW5hbF9wcm9kdWN0X2F1dGhvcml6YXRpb25faWQYWSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQiPygrWRBx1NZWRpY2luYWxQcm9kdWN0QXV0aG9yaXphdGlvbkgAEnkKJW1lZGljaW5hbF9wcm9kdWN0X2NvbnRyYWluZGljYXRpb25faWQYWiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQibygrWRByBNZWRpY2luYWxQcm9kdWN0Q29udHJhaW5kaWNhdGlvbkgAEm0KH21lZGljaW5hbF9wcm9kdWN0X2luZGljYXRpb25faWQYWyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQiDygrWRBxpNZWRpY2luYWxQcm9kdWN0SW5kaWNhdGlvbkgAEm0KH21lZGljaW5hbF9wcm9kdWN0X2luZ3JlZGllbnRfaWQYXCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQiDygrWRBxpNZWRpY2luYWxQcm9kdWN0SW5ncmVkaWVudEgAEm8KIG1lZGljaW5hbF9wcm9kdWN0X2ludGVyYWN0aW9uX2lkGF0gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIh8oK1kQcbTWVkaWNpbmFsUHJvZHVjdEludGVyYWN0aW9uSAAScQohbWVkaWNpbmFsX3Byb2R1Y3RfbWFudWZhY3R1cmVkX2lkGF4gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIi8oK1kQccTWVkaWNpbmFsUHJvZHVjdE1hbnVmYWN0dXJlZEgAEmkKHW1lZGljaW5hbF9wcm9kdWN0X3BhY2thZ2VkX2lkGF8gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIe8oK1kQcYTWVkaWNpbmFsUHJvZHVjdFBhY2thZ2VkSAASdQojbWVkaWNpbmFsX3Byb2R1Y3RfcGhhcm1hY2V1dGljYWxfaWQYYCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQiTygrWRBx5NZWRpY2luYWxQcm9kdWN0UGhhcm1hY2V1dGljYWxIABJ8CidtZWRpY2luYWxfcHJvZHVjdF91bmRlc2lyYWJsZV9lZmZlY3RfaWQYYSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQifygrWRByFNZWRpY2luYWxQcm9kdWN0VW5kZXNpcmFibGVFZmZlY3RIABJaChVtZXNzYWdlX2RlZmluaXRpb25faWQYYiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhfygrWRBxFNZXNzYWdlRGVmaW5pdGlvbkgAElIKEW1lc3NhZ2VfaGVhZGVyX2lkGGMgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNTWVzc2FnZUhlYWRlckgAEloKFW1vbGVjdWxhcl9zZXF1ZW5jZV9pZBhkIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCF/KCtZEHEU1vbGVjdWxhclNlcXVlbmNlSAASUAoQbmFtaW5nX3N5c3RlbV9pZBhlIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCEvKCtZEHDE5hbWluZ1N5c3RlbUgAElQKEm51dHJpdGlvbl9vcmRlcl9pZBhmIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFPKCtZEHDk51dHJpdGlvbk9yZGVySAASTQoOb2JzZXJ2YXRpb25faWQYZyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhHygrWRBwtPYnNlcnZhdGlvbkgAEmIKGW9ic2VydmF0aW9uX2RlZmluaXRpb25faWQYaCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhvygrWRBxVPYnNlcnZhdGlvbkRlZmluaXRpb25IABJeChdvcGVyYXRpb25fZGVmaW5pdGlvbl9pZBhpIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGfKCtZEHE09wZXJhdGlvbkRlZmluaXRpb25IABJYChRvcGVyYXRpb25fb3V0Y29tZV9pZBhqIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFvKCtZEHEE9wZXJhdGlvbk91dGNvbWVIABJPCg9vcmdhbml6YXRpb25faWQYayABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxPcmdhbml6YXRpb25IABJmChtvcmdhbml6YXRpb25fYWZmaWxpYXRpb25faWQYbCABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQh3ygrWRBxdPcmdhbml6YXRpb25BZmZpbGlhdGlvbkgAEksKDXBhcmFtZXRlcnNfaWQYbSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhDygrWRBwpQYXJhbWV0ZXJzSAASRQoKcGF0aWVudF9pZBhuIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDfKCtZEHB1BhdGllbnRIABJSChFwYXltZW50X25vdGljZV9pZBhvIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCE/KCtZEHDVBheW1lbnROb3RpY2VIABJiChlwYXltZW50X3JlY29uY2lsaWF0aW9uX2lkGHAgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIb8oK1kQcVUGF5bWVudFJlY29uY2lsaWF0aW9uSAASQwoJcGVyc29uX2lkGHEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIM8oK1kQcGUGVyc29uSAASVAoScGxhbl9kZWZpbml0aW9uX2lkGHIgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIU8oK1kQcOUGxhbkRlZmluaXRpb25IABJPCg9wcmFjdGl0aW9uZXJfaWQYcyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxQcmFjdGl0aW9uZXJIABJYChRwcmFjdGl0aW9uZXJfcm9sZV9pZBh0IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFvKCtZEHEFByYWN0aXRpb25lclJvbGVIABJJCgxwcm9jZWR1cmVfaWQYdSABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg/ygrWRBwlQcm9jZWR1cmVIABJLCg1wcm92ZW5hbmNlX2lkGHYgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIQ8oK1kQcKUHJvdmVuYW5jZUgAElEKEHF1ZXN0aW9ubmFpcmVfaWQYdyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1RdWVzdGlvbm5haXJlSAASYgoZcXVlc3Rpb25uYWlyZV9yZXNwb25zZV9pZBh4IAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCG/KCtZEHFVF1ZXN0aW9ubmFpcmVSZXNwb25zZUgAElIKEXJlbGF0ZWRfcGVyc29uX2lkGHkgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNUmVsYXRlZFBlcnNvbkgAElAKEHJlcXVlc3RfZ3JvdXBfaWQYeiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhLygrWRBwxSZXF1ZXN0R3JvdXBIABJcChZyZXNlYXJjaF9kZWZpbml0aW9uX2lkGHsgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIY8oK1kQcSUmVzZWFyY2hEZWZpbml0aW9uSAASawoecmVzZWFyY2hfZWxlbWVudF9kZWZpbml0aW9uX2lkGHwgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIf8oK1kQcZUmVzZWFyY2hFbGVtZW50RGVmaW5pdGlvbkgAElIKEXJlc2VhcmNoX3N0dWR5X2lkGH0gASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIT8oK1kQcNUmVzZWFyY2hTdHVkeUgAElYKE3Jlc2VhcmNoX3N1YmplY3RfaWQYfiABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhXygrWRBw9SZXNlYXJjaFN1YmplY3RIABJUChJyaXNrX2Fzc2Vzc21lbnRfaWQYfyABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhTygrWRBw5SaXNrQXNzZXNzbWVudEgAEmQKGnJpc2tfZXZpZGVuY2Vfc3ludGhlc2lzX2lkGIABIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCG/KCtZEHFVJpc2tFdmlkZW5jZVN5bnRoZXNpc0gAEkgKC3NjaGVkdWxlX2lkGIEBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCDvKCtZEHCFNjaGVkdWxlSAASVwoTc2VhcmNoX3BhcmFtZXRlcl9pZBiCASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhXygrWRBw9TZWFyY2hQYXJhbWV0ZXJIABJVChJzZXJ2aWNlX3JlcXVlc3RfaWQYgwEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIU8oK1kQcOU2VydmljZVJlcXVlc3RIABJACgdzbG90X2lkGIQBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCCvKCtZEHBFNsb3RIABJICgtzcGVjaW1lbl9pZBiFASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg7ygrWRBwhTcGVjaW1lbkgAEl0KFnNwZWNpbWVuX2RlZmluaXRpb25faWQYhgEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIY8oK1kQcSU3BlY2ltZW5EZWZpbml0aW9uSAASXwoXc3RydWN0dXJlX2RlZmluaXRpb25faWQYhwEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIZ8oK1kQcTU3RydWN0dXJlRGVmaW5pdGlvbkgAElEKEHN0cnVjdHVyZV9tYXBfaWQYiAEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIS8oK1kQcMU3RydWN0dXJlTWFwSAASUAoPc3Vic2NyaXB0aW9uX2lkGIkBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCEvKCtZEHDFN1YnNjcmlwdGlvbkgAEkoKDHN1YnN0YW5jZV9pZBiKASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQg/ygrWRBwlTdWJzdGFuY2VIABJiChlzdWJzdGFuY2VfbnVjbGVpY19hY2lkX2lkGIsBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGvKCtZEHFFN1YnN0YW5jZU51Y2xlaWNBY2lkSAASWQoUc3Vic3RhbmNlX3BvbHltZXJfaWQYjAEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQU3Vic3RhbmNlUG9seW1lckgAElkKFHN1YnN0YW5jZV9wcm90ZWluX2lkGI0BIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCFvKCtZEHEFN1YnN0YW5jZVByb3RlaW5IABJ0CiJzdWJzdGFuY2VfcmVmZXJlbmNlX2luZm9ybWF0aW9uX2lkGI4BIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCI/KCtZEHHVN1YnN0YW5jZVJlZmVyZW5jZUluZm9ybWF0aW9uSAASaAocc3Vic3RhbmNlX3NvdXJjZV9tYXRlcmlhbF9pZBiPASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQh3ygrWRBxdTdWJzdGFuY2VTb3VyY2VNYXRlcmlhbEgAEmUKGnN1YnN0YW5jZV9zcGVjaWZpY2F0aW9uX2lkGJABIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCHPKCtZEHFlN1YnN0YW5jZVNwZWNpZmljYXRpb25IABJVChJzdXBwbHlfZGVsaXZlcnlfaWQYkQEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIU8oK1kQcOU3VwcGx5RGVsaXZlcnlIABJTChFzdXBwbHlfcmVxdWVzdF9pZBiSASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQhPygrWRBw1TdXBwbHlSZXF1ZXN0SAASQAoHdGFza19pZBiTASABKAsyIC5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUlkQgrygrWRBwRUYXNrSAASZwobdGVybWlub2xvZ3lfY2FwYWJpbGl0aWVzX2lkGJQBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCHfKCtZEHF1Rlcm1pbm9sb2d5Q2FwYWJpbGl0aWVzSAASTQoOdGVzdF9yZXBvcnRfaWQYlQEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIQ8oK1kQcKVGVzdFJlcG9ydEgAEk0KDnRlc3Rfc2NyaXB0X2lkGJYBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCEPKCtZEHClRlc3RTY3JpcHRIABJJCgx2YWx1ZV9zZXRfaWQYlwEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIO8oK1kQcIVmFsdWVTZXRIABJdChZ2ZXJpZmljYXRpb25fcmVzdWx0X2lkGJgBIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlSWRCGPKCtZEHElZlcmlmaWNhdGlvblJlc3VsdEgAEl0KFnZpc2lvbl9wcmVzY3JpcHRpb25faWQYmQEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIY8oK1kQcSVmlzaW9uUHJlc2NyaXB0aW9uSAASWQoUbWV0YWRhdGFfcmVzb3VyY2VfaWQYmgEgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VJZEIW8oK1kQcQTWV0YWRhdGFSZXNvdXJjZUgAOkvAn+O2BQKKoZa8BQhSZXNvdXJjZbL+5JcGMWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9SZWZlcmVuY2VCEwoJcmVmZXJlbmNlEgaw7pKyBgEiqgEKC1JlZmVyZW5jZUlkEg0KBXZhbHVlGAEgASgJEigKB2hpc3RvcnkYAiABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkEicKAmlkGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAQgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246BsCf47YFASKsBgoPUmVsYXRlZEFydGlmYWN0EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SQwoEdHlwZRgDIAEoCzItLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVsYXRlZEFydGlmYWN0LlR5cGVDb2RlQgbw0IfrBAESKgoFbGFiZWwYBCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIsCgdkaXNwbGF5GAUgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLwoIY2l0YXRpb24YBiABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLk1hcmtkb3duEiUKA3VybBgHIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJsEjEKCGRvY3VtZW50GAggASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5BdHRhY2htZW50EjAKCHJlc291cmNlGAkgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5DYW5vbmljYWwamwIKCFR5cGVDb2RlEkEKBXZhbHVlGAEgASgOMjIuZ29vZ2xlLmZoaXIucjQuY29yZS5SZWxhdGVkQXJ0aWZhY3RUeXBlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOnCK+YOyBTJodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3JlbGF0ZWQtYXJ0aWZhY3QtdHlwZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlOkPAn+O2BQKy/uSXBjdodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUmVsYXRlZEFydGlmYWN0IpoECgtTYW1wbGVkRGF0YRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjsKBm9yaWdpbhgDIAEoCzIjLmdvb2dsZS5maGlyLnI0LmNvcmUuU2ltcGxlUXVhbnRpdHlCBvDQh+sEARI0CgZwZXJpb2QYBCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWxCBvDQh+sEARIsCgZmYWN0b3IYBSABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSMQoLbG93ZXJfbGltaXQYBiABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSMQoLdXBwZXJfbGltaXQYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSPAoKZGltZW5zaW9ucxgIIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnRCBvDQh+sEARIpCgRkYXRhGAkgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmc6P8Cf47YFArL+5JcGM2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9TYW1wbGVkRGF0YSLYCQoJU2lnbmF0dXJlEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMQoEdHlwZRgDIAMoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kaW5nQgbw0IfrBAESMgoEd2hlbhgEIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuSW5zdGFudEIG8NCH6wQBEpkBCgN3aG8YBSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUJs8NCH6wQB8v/8wgYMUHJhY3RpdGlvbmVy8v/8wgYQUHJhY3RpdGlvbmVyUm9sZfL//MIGDVJlbGF0ZWRQZXJzb27y//zCBgdQYXRpZW508v/8wgYGRGV2aWNl8v/8wgYMT3JnYW5pemF0aW9uEpwBCgxvbl9iZWhhbGZfb2YYBiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUJm8v/8wgYMUHJhY3RpdGlvbmVy8v/8wgYQUHJhY3RpdGlvbmVyUm9sZfL//MIGDVJlbGF0ZWRQZXJzb27y//zCBgdQYXRpZW508v/8wgYGRGV2aWNl8v/8wgYMT3JnYW5pemF0aW9uEkYKDXRhcmdldF9mb3JtYXQYByABKAsyLy5nb29nbGUuZmhpci5yNC5jb3JlLlNpZ25hdHVyZS5UYXJnZXRGb3JtYXRDb2RlEkAKCnNpZ19mb3JtYXQYCCABKAsyLC5nb29nbGUuZmhpci5yNC5jb3JlLlNpZ25hdHVyZS5TaWdGb3JtYXRDb2RlEi8KBGRhdGEYCSABKAsyIS5nb29nbGUuZmhpci5yNC5jb3JlLkJhc2U2NEJpbmFyeRrpAQoQVGFyZ2V0Rm9ybWF0Q29kZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEg0KBXZhbHVlGAQgASgJOmSK+YOyBSZodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L21pbWV0eXBlc8Cf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlSgQIARACGuYBCg1TaWdGb3JtYXRDb2RlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SDQoFdmFsdWUYBCABKAk6ZIr5g7IFJmh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvbWltZXR5cGVzwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGVKBAgBEAI6PcCf47YFArL+5JcGMWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9TaWduYXR1cmUi1QMKDlNpbXBsZVF1YW50aXR5EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SKwoFdmFsdWUYAyABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSKQoEdW5pdBgFIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEigKBnN5c3RlbRgGIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpEicKBGNvZGUYByABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGU6tQHAn+O2BQKatY6TBjBodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vUXVhbnRpdHmy/uSXBjZodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vU2ltcGxlUXVhbnRpdHmahpOgCB9jb2RlLmVtcHR5KCkgb3Igc3lzdGVtLmV4aXN0cygpmoaToAgSY29tcGFyYXRvci5lbXB0eSgpSgQIBBAFIsEBCgZTdHJpbmcSDQoFdmFsdWUYASABKAkSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpMwJ/jtgUBkvqijAYMWyBcclxuXHRcU10rsv7klwYuaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3N0cmluZyL2BgoPU3Vic3RhbmNlQW1vdW50EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SPAoGYW1vdW50GAQgASgLMiwuZ29vZ2xlLmZoaXIucjQuY29yZS5TdWJzdGFuY2VBbW91bnQuQW1vdW50WBI5CgthbW91bnRfdHlwZRgFIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjAKC2Ftb3VudF90ZXh0GAYgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSTAoPcmVmZXJlbmNlX3JhbmdlGAcgASgLMjMuZ29vZ2xlLmZoaXIucjQuY29yZS5TdWJzdGFuY2VBbW91bnQuUmVmZXJlbmNlUmFuZ2UauAEKB0Ftb3VudFgSMQoIcXVhbnRpdHkYASABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLlF1YW50aXR5SAASKwoFcmFuZ2UYAiABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLlJhbmdlSAASOwoMc3RyaW5nX3ZhbHVlGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdIAFIGc3RyaW5nOgagg4PoBgFCCAoGY2hvaWNlGtEBCg5SZWZlcmVuY2VSYW5nZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjAKCWxvd19saW1pdBgDIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHkSMQoKaGlnaF9saW1pdBgEIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuUXVhbnRpdHk6Q8Cf47YFArL+5JcGN2h0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9TdWJzdGFuY2VBbW91bnQi+gIKBFRpbWUSEAoIdmFsdWVfdXMYASABKAMSNgoJcHJlY2lzaW9uGAIgASgOMiMuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1lLlByZWNpc2lvbhInCgJpZBgDIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgEIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uIlQKCVByZWNpc2lvbhIZChVQUkVDSVNJT05fVU5TUEVDSUZJRUQQABIKCgZTRUNPTkQQARIPCgtNSUxMSVNFQ09ORBACEg8KC01JQ1JPU0VDT05EEAM6dsCf47YFAZL6oowGOChbMDFdWzAtOV18MlswLTNdKTpbMC01XVswLTldOihbMC01XVswLTldfDYwKShcLlswLTldKyk/sv7klwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3RpbWUi2BcKBlRpbWluZxInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEiwKBWV2ZW50GAQgAygLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZRIyCgZyZXBlYXQYBSABKAsyIi5nb29nbGUuZmhpci5yNC5jb3JlLlRpbWluZy5SZXBlYXQSMgoEY29kZRgGIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0GuMUCgZSZXBlYXQSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6CgZib3VuZHMYAyABKAsyKi5nb29nbGUuZmhpci5yNC5jb3JlLlRpbWluZy5SZXBlYXQuQm91bmRzWBIvCgVjb3VudBgEIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnQSMwoJY291bnRfbWF4GAUgASgLMiAuZ29vZ2xlLmZoaXIucjQuY29yZS5Qb3NpdGl2ZUludBIuCghkdXJhdGlvbhgGIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuRGVjaW1hbBIyCgxkdXJhdGlvbl9tYXgYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSSgoNZHVyYXRpb25fdW5pdBgIIAEoCzIzLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltaW5nLlJlcGVhdC5EdXJhdGlvblVuaXRDb2RlEjMKCWZyZXF1ZW5jeRgJIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnQSNwoNZnJlcXVlbmN5X21heBgKIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuUG9zaXRpdmVJbnQSLAoGcGVyaW9kGAsgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEjAKCnBlcmlvZF9tYXgYDCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSRgoLcGVyaW9kX3VuaXQYDSABKAsyMS5nb29nbGUuZmhpci5yNC5jb3JlLlRpbWluZy5SZXBlYXQuUGVyaW9kVW5pdENvZGUSRQoLZGF5X29mX3dlZWsYDiADKAsyMC5nb29nbGUuZmhpci5yNC5jb3JlLlRpbWluZy5SZXBlYXQuRGF5T2ZXZWVrQ29kZRIuCgt0aW1lX29mX2RheRgPIAMoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltZRI5CgR3aGVuGBAgAygLMisuZ29vZ2xlLmZoaXIucjQuY29yZS5UaW1pbmcuUmVwZWF0LldoZW5Db2RlEjAKBm9mZnNldBgRIAEoCzIgLmdvb2dsZS5maGlyLnI0LmNvcmUuVW5zaWduZWRJbnQaqgEKB0JvdW5kc1gSMQoIZHVyYXRpb24YASABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLkR1cmF0aW9uSAASKwoFcmFuZ2UYAiABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLlJhbmdlSAASLQoGcGVyaW9kGAMgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5QZXJpb2RIADoGoIOD6AYBQggKBmNob2ljZRqXAgoQRHVyYXRpb25Vbml0Q29kZRI9CgV2YWx1ZRgBIAEoDjIuLmdvb2dsZS5maGlyLnI0LmNvcmUuVW5pdHNPZlRpbWVWYWx1ZVNldC5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmiK+YOyBSpodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3VuaXRzLW9mLXRpbWXAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZRqVAgoOUGVyaW9kVW5pdENvZGUSPQoFdmFsdWUYASABKA4yLi5nb29nbGUuZmhpci5yNC5jb3JlLlVuaXRzT2ZUaW1lVmFsdWVTZXQuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpoivmDsgUqaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC91bml0cy1vZi10aW1lwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUajgIKDURheU9mV2Vla0NvZGUSOAoFdmFsdWUYASABKA4yKS5nb29nbGUuZmhpci5yNC5jb3JlLkRheXNPZldlZWtDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246Z4r5g7IFKWh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZGF5cy1vZi13ZWVrwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUajgIKCFdoZW5Db2RlEj0KBXZhbHVlGAEgASgOMi4uZ29vZ2xlLmZoaXIucjQuY29yZS5FdmVudFRpbWluZ1ZhbHVlU2V0LlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246Z4r5g7IFKWh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZXZlbnQtdGltaW5nwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU6rwOahpOgCClkdXJhdGlvbi5lbXB0eSgpIG9yIGR1cmF0aW9uVW5pdC5leGlzdHMoKZqGk6AIJXBlcmlvZC5lbXB0eSgpIG9yIHBlcmlvZFVuaXQuZXhpc3RzKCmahpOgCCdkdXJhdGlvbi5leGlzdHMoKSBpbXBsaWVzIGR1cmF0aW9uID49IDCahpOgCCNwZXJpb2QuZXhpc3RzKCkgaW1wbGllcyBwZXJpb2QgPj0gMJqGk6AIJHBlcmlvZE1heC5lbXB0eSgpIG9yIHBlcmlvZC5leGlzdHMoKZqGk6AIKGR1cmF0aW9uTWF4LmVtcHR5KCkgb3IgZHVyYXRpb24uZXhpc3RzKCmahpOgCCJjb3VudE1heC5lbXB0eSgpIG9yIGNvdW50LmV4aXN0cygpmoaToAhSb2Zmc2V0LmVtcHR5KCkgb3IgKHdoZW4uZXhpc3RzKCkgYW5kICgod2hlbiBpbiAoJ0MnIHwgJ0NNJyB8ICdDRCcgfCAnQ1YnKSkubm90KCkpKZqGk6AIIXRpbWVPZkRheS5lbXB0eSgpIG9yIHdoZW4uZW1wdHkoKTo6wJ/jtgUCsv7klwYuaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1RpbWluZyK5CQoRVHJpZ2dlckRlZmluaXRpb24SJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhJFCgR0eXBlGAMgASgLMi8uZ29vZ2xlLmZoaXIucjQuY29yZS5UcmlnZ2VyRGVmaW5pdGlvbi5UeXBlQ29kZUIG8NCH6wQBEikKBG5hbWUYBCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxI+CgZ0aW1pbmcYBSABKAsyLi5nb29nbGUuZmhpci5yNC5jb3JlLlRyaWdnZXJEZWZpbml0aW9uLlRpbWluZ1gSMgoEZGF0YRgGIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0YVJlcXVpcmVtZW50EjIKCWNvbmRpdGlvbhgHIAEoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuRXhwcmVzc2lvbhqKAgoIVHlwZUNvZGUSOQoFdmFsdWUYASABKA4yKi5nb29nbGUuZmhpci5yNC5jb3JlLlRyaWdnZXJUeXBlQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmeK+YOyBSlodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3RyaWdnZXItdHlwZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlGu4BCgdUaW1pbmdYEi0KBnRpbWluZxgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuVGltaW5nSAASQwoJcmVmZXJlbmNlGAIgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCDvL//MIGCFNjaGVkdWxlSAASKQoEZGF0ZRgDIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZUgAEjIKCWRhdGVfdGltZRgEIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWVIADoGoIOD6AYBQggKBmNob2ljZTqvAsCf47YFArL+5JcGOWh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9UcmlnZ2VyRGVmaW5pdGlvbpqGk6AIHmRhdGEuZW1wdHkoKSBvciB0aW1pbmcuZW1wdHkoKZqGk6AIKGNvbmRpdGlvbi5leGlzdHMoKSBpbXBsaWVzIGRhdGEuZXhpc3RzKCmahpOgCJEBKHR5cGUgPSAnbmFtZWQtZXZlbnQnIGltcGxpZXMgbmFtZS5leGlzdHMoKSkgYW5kICh0eXBlID0gJ3BlcmlvZGljJyBpbXBsaWVzIHRpbWluZy5leGlzdHMoKSkgYW5kICh0eXBlLnN0YXJ0c1dpdGgoJ2RhdGEtJykgaW1wbGllcyBkYXRhLmV4aXN0cygpKSLQAQoLVW5zaWduZWRJbnQSDQoFdmFsdWUYASABKA0SJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpWwJ/jtgUBkvqijAYRWzBdfChbMS05XVswLTldKimy/uSXBjNodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vdW5zaWduZWRJbnQisgEKA1VyaRINCgV2YWx1ZRgBIAEoCRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOkDAn+O2BQGS+qKMBgNcUyqy/uSXBitodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vdXJpIrIBCgNVcmwSDQoFdmFsdWUYASABKAkSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjpAwJ/jtgUBkvqijAYDXFMqsv7klwYraHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL3VybCKTBQoMVXNhZ2VDb250ZXh0EicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMQoEY29kZRgDIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kaW5nQgbw0IfrBAESPwoFdmFsdWUYBCABKAsyKC5nb29nbGUuZmhpci5yNC5jb3JlLlVzYWdlQ29udGV4dC5WYWx1ZVhCBvDQh+sEARrwAgoGVmFsdWVYEkAKEGNvZGVhYmxlX2NvbmNlcHQYASABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEgAEjEKCHF1YW50aXR5GAIgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5RdWFudGl0eUgAEisKBXJhbmdlGAMgASgLMhouZ29vZ2xlLmZoaXIucjQuY29yZS5SYW5nZUgAErEBCglyZWZlcmVuY2UYBCABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUJ88v/8wgYOUGxhbkRlZmluaXRpb27y//zCBg1SZXNlYXJjaFN0dWR58v/8wgYNSW5zdXJhbmNlUGxhbvL//MIGEUhlYWx0aGNhcmVTZXJ2aWNl8v/8wgYFR3JvdXDy//zCBghMb2NhdGlvbvL//MIGDE9yZ2FuaXphdGlvbkgAOgagg4PoBgFCCAoGY2hvaWNlOkDAn+O2BQKy/uSXBjRodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vVXNhZ2VDb250ZXh0IvcBCgRVdWlkEg0KBXZhbHVlGAEgASgJEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246gwHAn+O2BQGS+qKMBkV1cm46dXVpZDpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXsxMn2y/uSXBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vdXVpZCKIAQoFWGh0bWwSFQoFdmFsdWUYASABKAlCBvDQh+sEARInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nOjnAn+O2BQGy/uSXBi1odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24veGh0bWxKBAgDEAQiiQMKE0NvZGluZ1dpdGhGaXhlZENvZGUSJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIsCgd2ZXJzaW9uGAQgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSLAoHZGlzcGxheRgGIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjMKDXVzZXJfc2VsZWN0ZWQYByABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW46ecCf47YFApq1jpMGLmh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9Db2Rpbmey/uSXBjlodHRwczovL2cuY28vZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0NvZGluZ1dpdGhGaXhlZENvZGVKBAgDEARKBAgFEAZCbwoXY29tLmdvb2dsZS5maGlyLnI0LmNvcmVQAVpMZ2l0aHViLmNvbS9nb29nbGUvZmhpci9nby9wcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL2RhdGF0eXBlc19nb19wcm90b5jGsLUHBGIGcHJvdG8z", [annotations_pb_1.file_proto_google_fhir_proto_annotations, codes_pb_1.file_proto_google_fhir_proto_r4_core_codes, valuesets_pb_1.file_proto_google_fhir_proto_r4_core_valuesets]);
/**
 * Describes the message google.fhir.r4.core.Address.
 * Use `create(AddressSchema)` to create a new message.
 */
exports.AddressSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 0);
/**
 * Describes the message google.fhir.r4.core.Address.UseCode.
 * Use `create(Address_UseCodeSchema)` to create a new message.
 */
exports.Address_UseCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 0, 0);
/**
 * Describes the message google.fhir.r4.core.Address.TypeCode.
 * Use `create(Address_TypeCodeSchema)` to create a new message.
 */
exports.Address_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 0, 1);
/**
 * Describes the message google.fhir.r4.core.Age.
 * Use `create(AgeSchema)` to create a new message.
 */
exports.AgeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 1);
/**
 * Describes the message google.fhir.r4.core.Age.ComparatorCode.
 * Use `create(Age_ComparatorCodeSchema)` to create a new message.
 */
exports.Age_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 1, 0);
/**
 * Describes the message google.fhir.r4.core.Annotation.
 * Use `create(AnnotationSchema)` to create a new message.
 */
exports.AnnotationSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 2);
/**
 * Describes the message google.fhir.r4.core.Annotation.AuthorX.
 * Use `create(Annotation_AuthorXSchema)` to create a new message.
 */
exports.Annotation_AuthorXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 2, 0);
/**
 * Describes the message google.fhir.r4.core.Attachment.
 * Use `create(AttachmentSchema)` to create a new message.
 */
exports.AttachmentSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 3);
/**
 * Describes the message google.fhir.r4.core.Attachment.ContentTypeCode.
 * Use `create(Attachment_ContentTypeCodeSchema)` to create a new message.
 */
exports.Attachment_ContentTypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 3, 0);
/**
 * Describes the message google.fhir.r4.core.BackboneElement.
 * Use `create(BackboneElementSchema)` to create a new message.
 */
exports.BackboneElementSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 4);
/**
 * Describes the message google.fhir.r4.core.Base64Binary.
 * Use `create(Base64BinarySchema)` to create a new message.
 */
exports.Base64BinarySchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 5);
/**
 * Describes the message google.fhir.r4.core.Boolean.
 * Use `create(BooleanSchema)` to create a new message.
 */
exports.BooleanSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 6);
/**
 * Describes the message google.fhir.r4.core.Canonical.
 * Use `create(CanonicalSchema)` to create a new message.
 */
exports.CanonicalSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 7);
/**
 * Describes the message google.fhir.r4.core.Code.
 * Use `create(CodeSchema)` to create a new message.
 */
exports.CodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 8);
/**
 * Describes the message google.fhir.r4.core.CodeableConcept.
 * Use `create(CodeableConceptSchema)` to create a new message.
 */
exports.CodeableConceptSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 9);
/**
 * Describes the message google.fhir.r4.core.Coding.
 * Use `create(CodingSchema)` to create a new message.
 */
exports.CodingSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 10);
/**
 * Describes the message google.fhir.r4.core.ContactDetail.
 * Use `create(ContactDetailSchema)` to create a new message.
 */
exports.ContactDetailSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 11);
/**
 * Describes the message google.fhir.r4.core.ContactPoint.
 * Use `create(ContactPointSchema)` to create a new message.
 */
exports.ContactPointSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 12);
/**
 * Describes the message google.fhir.r4.core.ContactPoint.SystemCode.
 * Use `create(ContactPoint_SystemCodeSchema)` to create a new message.
 */
exports.ContactPoint_SystemCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 12, 0);
/**
 * Describes the message google.fhir.r4.core.ContactPoint.UseCode.
 * Use `create(ContactPoint_UseCodeSchema)` to create a new message.
 */
exports.ContactPoint_UseCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 12, 1);
/**
 * Describes the message google.fhir.r4.core.Contributor.
 * Use `create(ContributorSchema)` to create a new message.
 */
exports.ContributorSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 13);
/**
 * Describes the message google.fhir.r4.core.Contributor.TypeCode.
 * Use `create(Contributor_TypeCodeSchema)` to create a new message.
 */
exports.Contributor_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 13, 0);
/**
 * Describes the message google.fhir.r4.core.Count.
 * Use `create(CountSchema)` to create a new message.
 */
exports.CountSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 14);
/**
 * Describes the message google.fhir.r4.core.Count.ComparatorCode.
 * Use `create(Count_ComparatorCodeSchema)` to create a new message.
 */
exports.Count_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 14, 0);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.
 * Use `create(DataRequirementSchema)` to create a new message.
 */
exports.DataRequirementSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.TypeCode.
 * Use `create(DataRequirement_TypeCodeSchema)` to create a new message.
 */
exports.DataRequirement_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 0);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.SubjectX.
 * Use `create(DataRequirement_SubjectXSchema)` to create a new message.
 */
exports.DataRequirement_SubjectXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 1);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.CodeFilter.
 * Use `create(DataRequirement_CodeFilterSchema)` to create a new message.
 */
exports.DataRequirement_CodeFilterSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 2);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.DateFilter.
 * Use `create(DataRequirement_DateFilterSchema)` to create a new message.
 */
exports.DataRequirement_DateFilterSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 3);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.DateFilter.ValueX.
 * Use `create(DataRequirement_DateFilter_ValueXSchema)` to create a new message.
 */
exports.DataRequirement_DateFilter_ValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 3, 0);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.Sort.
 * Use `create(DataRequirement_SortSchema)` to create a new message.
 */
exports.DataRequirement_SortSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 4);
/**
 * Describes the message google.fhir.r4.core.DataRequirement.Sort.DirectionCode.
 * Use `create(DataRequirement_Sort_DirectionCodeSchema)` to create a new message.
 */
exports.DataRequirement_Sort_DirectionCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 15, 4, 0);
/**
 * Describes the message google.fhir.r4.core.Date.
 * Use `create(DateSchema)` to create a new message.
 */
exports.DateSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 16);
/**
 * @generated from enum google.fhir.r4.core.Date.Precision
 */
var Date_Precision;
(function (Date_Precision) {
    /**
     * @generated from enum value: PRECISION_UNSPECIFIED = 0;
     */
    Date_Precision[Date_Precision["PRECISION_UNSPECIFIED"] = 0] = "PRECISION_UNSPECIFIED";
    /**
     * @generated from enum value: YEAR = 1;
     */
    Date_Precision[Date_Precision["YEAR"] = 1] = "YEAR";
    /**
     * @generated from enum value: MONTH = 2;
     */
    Date_Precision[Date_Precision["MONTH"] = 2] = "MONTH";
    /**
     * @generated from enum value: DAY = 3;
     */
    Date_Precision[Date_Precision["DAY"] = 3] = "DAY";
})(Date_Precision || (exports.Date_Precision = Date_Precision = {}));
/**
 * Describes the enum google.fhir.r4.core.Date.Precision.
 */
exports.Date_PrecisionSchema = (0, codegenv1_1.enumDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 16, 0);
/**
 * Describes the message google.fhir.r4.core.DateTime.
 * Use `create(DateTimeSchema)` to create a new message.
 */
exports.DateTimeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 17);
/**
 * @generated from enum google.fhir.r4.core.DateTime.Precision
 */
var DateTime_Precision;
(function (DateTime_Precision) {
    /**
     * @generated from enum value: PRECISION_UNSPECIFIED = 0;
     */
    DateTime_Precision[DateTime_Precision["PRECISION_UNSPECIFIED"] = 0] = "PRECISION_UNSPECIFIED";
    /**
     * @generated from enum value: YEAR = 1;
     */
    DateTime_Precision[DateTime_Precision["YEAR"] = 1] = "YEAR";
    /**
     * @generated from enum value: MONTH = 2;
     */
    DateTime_Precision[DateTime_Precision["MONTH"] = 2] = "MONTH";
    /**
     * @generated from enum value: DAY = 3;
     */
    DateTime_Precision[DateTime_Precision["DAY"] = 3] = "DAY";
    /**
     * @generated from enum value: SECOND = 4;
     */
    DateTime_Precision[DateTime_Precision["SECOND"] = 4] = "SECOND";
    /**
     * @generated from enum value: MILLISECOND = 5;
     */
    DateTime_Precision[DateTime_Precision["MILLISECOND"] = 5] = "MILLISECOND";
    /**
     * @generated from enum value: MICROSECOND = 6;
     */
    DateTime_Precision[DateTime_Precision["MICROSECOND"] = 6] = "MICROSECOND";
})(DateTime_Precision || (exports.DateTime_Precision = DateTime_Precision = {}));
/**
 * Describes the enum google.fhir.r4.core.DateTime.Precision.
 */
exports.DateTime_PrecisionSchema = (0, codegenv1_1.enumDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 17, 0);
/**
 * Describes the message google.fhir.r4.core.Decimal.
 * Use `create(DecimalSchema)` to create a new message.
 */
exports.DecimalSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 18);
/**
 * Describes the message google.fhir.r4.core.Distance.
 * Use `create(DistanceSchema)` to create a new message.
 */
exports.DistanceSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 19);
/**
 * Describes the message google.fhir.r4.core.Distance.ComparatorCode.
 * Use `create(Distance_ComparatorCodeSchema)` to create a new message.
 */
exports.Distance_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 19, 0);
/**
 * Describes the message google.fhir.r4.core.Dosage.
 * Use `create(DosageSchema)` to create a new message.
 */
exports.DosageSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 20);
/**
 * Describes the message google.fhir.r4.core.Dosage.AsNeededX.
 * Use `create(Dosage_AsNeededXSchema)` to create a new message.
 */
exports.Dosage_AsNeededXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 20, 0);
/**
 * Describes the message google.fhir.r4.core.Dosage.DoseAndRate.
 * Use `create(Dosage_DoseAndRateSchema)` to create a new message.
 */
exports.Dosage_DoseAndRateSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 20, 1);
/**
 * Describes the message google.fhir.r4.core.Dosage.DoseAndRate.DoseX.
 * Use `create(Dosage_DoseAndRate_DoseXSchema)` to create a new message.
 */
exports.Dosage_DoseAndRate_DoseXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 20, 1, 0);
/**
 * Describes the message google.fhir.r4.core.Dosage.DoseAndRate.RateX.
 * Use `create(Dosage_DoseAndRate_RateXSchema)` to create a new message.
 */
exports.Dosage_DoseAndRate_RateXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 20, 1, 1);
/**
 * Describes the message google.fhir.r4.core.Duration.
 * Use `create(DurationSchema)` to create a new message.
 */
exports.DurationSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 21);
/**
 * Describes the message google.fhir.r4.core.Duration.ComparatorCode.
 * Use `create(Duration_ComparatorCodeSchema)` to create a new message.
 */
exports.Duration_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 21, 0);
/**
 * Describes the message google.fhir.r4.core.Element.
 * Use `create(ElementSchema)` to create a new message.
 */
exports.ElementSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 22);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.
 * Use `create(ElementDefinitionSchema)` to create a new message.
 */
exports.ElementDefinitionSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.RepresentationCode.
 * Use `create(ElementDefinition_RepresentationCodeSchema)` to create a new message.
 */
exports.ElementDefinition_RepresentationCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Slicing.
 * Use `create(ElementDefinition_SlicingSchema)` to create a new message.
 */
exports.ElementDefinition_SlicingSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 1);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Slicing.Discriminator.
 * Use `create(ElementDefinition_Slicing_DiscriminatorSchema)` to create a new message.
 */
exports.ElementDefinition_Slicing_DiscriminatorSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 1, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Slicing.Discriminator.TypeCode.
 * Use `create(ElementDefinition_Slicing_Discriminator_TypeCodeSchema)` to create a new message.
 */
exports.ElementDefinition_Slicing_Discriminator_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 1, 0, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Slicing.RulesCode.
 * Use `create(ElementDefinition_Slicing_RulesCodeSchema)` to create a new message.
 */
exports.ElementDefinition_Slicing_RulesCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 1, 1);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Base.
 * Use `create(ElementDefinition_BaseSchema)` to create a new message.
 */
exports.ElementDefinition_BaseSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 2);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.TypeRef.
 * Use `create(ElementDefinition_TypeRefSchema)` to create a new message.
 */
exports.ElementDefinition_TypeRefSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 3);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.TypeRef.AggregationCode.
 * Use `create(ElementDefinition_TypeRef_AggregationCodeSchema)` to create a new message.
 */
exports.ElementDefinition_TypeRef_AggregationCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 3, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.TypeRef.VersioningCode.
 * Use `create(ElementDefinition_TypeRef_VersioningCodeSchema)` to create a new message.
 */
exports.ElementDefinition_TypeRef_VersioningCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 3, 1);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.DefaultValueX.
 * Use `create(ElementDefinition_DefaultValueXSchema)` to create a new message.
 */
exports.ElementDefinition_DefaultValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 4);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.FixedX.
 * Use `create(ElementDefinition_FixedXSchema)` to create a new message.
 */
exports.ElementDefinition_FixedXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 5);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.PatternX.
 * Use `create(ElementDefinition_PatternXSchema)` to create a new message.
 */
exports.ElementDefinition_PatternXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 6);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Example.
 * Use `create(ElementDefinition_ExampleSchema)` to create a new message.
 */
exports.ElementDefinition_ExampleSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 7);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Example.ValueX.
 * Use `create(ElementDefinition_Example_ValueXSchema)` to create a new message.
 */
exports.ElementDefinition_Example_ValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 7, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.MinValueX.
 * Use `create(ElementDefinition_MinValueXSchema)` to create a new message.
 */
exports.ElementDefinition_MinValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 8);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.MaxValueX.
 * Use `create(ElementDefinition_MaxValueXSchema)` to create a new message.
 */
exports.ElementDefinition_MaxValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 9);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Constraint.
 * Use `create(ElementDefinition_ConstraintSchema)` to create a new message.
 */
exports.ElementDefinition_ConstraintSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 10);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Constraint.SeverityCode.
 * Use `create(ElementDefinition_Constraint_SeverityCodeSchema)` to create a new message.
 */
exports.ElementDefinition_Constraint_SeverityCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 10, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.ElementDefinitionBinding.
 * Use `create(ElementDefinition_ElementDefinitionBindingSchema)` to create a new message.
 */
exports.ElementDefinition_ElementDefinitionBindingSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 11);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.ElementDefinitionBinding.StrengthCode.
 * Use `create(ElementDefinition_ElementDefinitionBinding_StrengthCodeSchema)` to create a new message.
 */
exports.ElementDefinition_ElementDefinitionBinding_StrengthCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 11, 0);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Mapping.
 * Use `create(ElementDefinition_MappingSchema)` to create a new message.
 */
exports.ElementDefinition_MappingSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 12);
/**
 * Describes the message google.fhir.r4.core.ElementDefinition.Mapping.LanguageCode.
 * Use `create(ElementDefinition_Mapping_LanguageCodeSchema)` to create a new message.
 */
exports.ElementDefinition_Mapping_LanguageCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 23, 12, 0);
/**
 * Describes the message google.fhir.r4.core.Expression.
 * Use `create(ExpressionSchema)` to create a new message.
 */
exports.ExpressionSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 24);
/**
 * Describes the message google.fhir.r4.core.Extension.
 * Use `create(ExtensionSchema)` to create a new message.
 */
exports.ExtensionSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 25);
/**
 * Describes the message google.fhir.r4.core.Extension.ValueX.
 * Use `create(Extension_ValueXSchema)` to create a new message.
 */
exports.Extension_ValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 25, 0);
/**
 * Describes the message google.fhir.r4.core.HumanName.
 * Use `create(HumanNameSchema)` to create a new message.
 */
exports.HumanNameSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 26);
/**
 * Describes the message google.fhir.r4.core.HumanName.UseCode.
 * Use `create(HumanName_UseCodeSchema)` to create a new message.
 */
exports.HumanName_UseCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 26, 0);
/**
 * Describes the message google.fhir.r4.core.Id.
 * Use `create(IdSchema)` to create a new message.
 */
exports.IdSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 27);
/**
 * Describes the message google.fhir.r4.core.Identifier.
 * Use `create(IdentifierSchema)` to create a new message.
 */
exports.IdentifierSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 28);
/**
 * Describes the message google.fhir.r4.core.Identifier.UseCode.
 * Use `create(Identifier_UseCodeSchema)` to create a new message.
 */
exports.Identifier_UseCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 28, 0);
/**
 * Describes the message google.fhir.r4.core.Instant.
 * Use `create(InstantSchema)` to create a new message.
 */
exports.InstantSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 29);
/**
 * @generated from enum google.fhir.r4.core.Instant.Precision
 */
var Instant_Precision;
(function (Instant_Precision) {
    /**
     * @generated from enum value: PRECISION_UNSPECIFIED = 0;
     */
    Instant_Precision[Instant_Precision["PRECISION_UNSPECIFIED"] = 0] = "PRECISION_UNSPECIFIED";
    /**
     * @generated from enum value: SECOND = 1;
     */
    Instant_Precision[Instant_Precision["SECOND"] = 1] = "SECOND";
    /**
     * @generated from enum value: MILLISECOND = 2;
     */
    Instant_Precision[Instant_Precision["MILLISECOND"] = 2] = "MILLISECOND";
    /**
     * @generated from enum value: MICROSECOND = 3;
     */
    Instant_Precision[Instant_Precision["MICROSECOND"] = 3] = "MICROSECOND";
})(Instant_Precision || (exports.Instant_Precision = Instant_Precision = {}));
/**
 * Describes the enum google.fhir.r4.core.Instant.Precision.
 */
exports.Instant_PrecisionSchema = (0, codegenv1_1.enumDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 29, 0);
/**
 * Describes the message google.fhir.r4.core.Integer.
 * Use `create(IntegerSchema)` to create a new message.
 */
exports.IntegerSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 30);
/**
 * Describes the message google.fhir.r4.core.Markdown.
 * Use `create(MarkdownSchema)` to create a new message.
 */
exports.MarkdownSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 31);
/**
 * Describes the message google.fhir.r4.core.MarketingStatus.
 * Use `create(MarketingStatusSchema)` to create a new message.
 */
exports.MarketingStatusSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 32);
/**
 * Describes the message google.fhir.r4.core.Meta.
 * Use `create(MetaSchema)` to create a new message.
 */
exports.MetaSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 33);
/**
 * Describes the message google.fhir.r4.core.Money.
 * Use `create(MoneySchema)` to create a new message.
 */
exports.MoneySchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 34);
/**
 * Describes the message google.fhir.r4.core.Money.CurrencyCode.
 * Use `create(Money_CurrencyCodeSchema)` to create a new message.
 */
exports.Money_CurrencyCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 34, 0);
/**
 * Describes the message google.fhir.r4.core.MoneyQuantity.
 * Use `create(MoneyQuantitySchema)` to create a new message.
 */
exports.MoneyQuantitySchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 35);
/**
 * Describes the message google.fhir.r4.core.MoneyQuantity.ComparatorCode.
 * Use `create(MoneyQuantity_ComparatorCodeSchema)` to create a new message.
 */
exports.MoneyQuantity_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 35, 0);
/**
 * Describes the message google.fhir.r4.core.Narrative.
 * Use `create(NarrativeSchema)` to create a new message.
 */
exports.NarrativeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 36);
/**
 * Describes the message google.fhir.r4.core.Narrative.StatusCode.
 * Use `create(Narrative_StatusCodeSchema)` to create a new message.
 */
exports.Narrative_StatusCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 36, 0);
/**
 * Describes the message google.fhir.r4.core.Oid.
 * Use `create(OidSchema)` to create a new message.
 */
exports.OidSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 37);
/**
 * Describes the message google.fhir.r4.core.ParameterDefinition.
 * Use `create(ParameterDefinitionSchema)` to create a new message.
 */
exports.ParameterDefinitionSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 38);
/**
 * Describes the message google.fhir.r4.core.ParameterDefinition.UseCode.
 * Use `create(ParameterDefinition_UseCodeSchema)` to create a new message.
 */
exports.ParameterDefinition_UseCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 38, 0);
/**
 * Describes the message google.fhir.r4.core.ParameterDefinition.TypeCode.
 * Use `create(ParameterDefinition_TypeCodeSchema)` to create a new message.
 */
exports.ParameterDefinition_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 38, 1);
/**
 * Describes the message google.fhir.r4.core.Period.
 * Use `create(PeriodSchema)` to create a new message.
 */
exports.PeriodSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 39);
/**
 * Describes the message google.fhir.r4.core.Population.
 * Use `create(PopulationSchema)` to create a new message.
 */
exports.PopulationSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 40);
/**
 * Describes the message google.fhir.r4.core.Population.AgeX.
 * Use `create(Population_AgeXSchema)` to create a new message.
 */
exports.Population_AgeXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 40, 0);
/**
 * Describes the message google.fhir.r4.core.PositiveInt.
 * Use `create(PositiveIntSchema)` to create a new message.
 */
exports.PositiveIntSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 41);
/**
 * Describes the message google.fhir.r4.core.ProdCharacteristic.
 * Use `create(ProdCharacteristicSchema)` to create a new message.
 */
exports.ProdCharacteristicSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 42);
/**
 * Describes the message google.fhir.r4.core.ProductShelfLife.
 * Use `create(ProductShelfLifeSchema)` to create a new message.
 */
exports.ProductShelfLifeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 43);
/**
 * Describes the message google.fhir.r4.core.Quantity.
 * Use `create(QuantitySchema)` to create a new message.
 */
exports.QuantitySchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 44);
/**
 * Describes the message google.fhir.r4.core.Quantity.ComparatorCode.
 * Use `create(Quantity_ComparatorCodeSchema)` to create a new message.
 */
exports.Quantity_ComparatorCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 44, 0);
/**
 * Describes the message google.fhir.r4.core.Range.
 * Use `create(RangeSchema)` to create a new message.
 */
exports.RangeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 45);
/**
 * Describes the message google.fhir.r4.core.Ratio.
 * Use `create(RatioSchema)` to create a new message.
 */
exports.RatioSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 46);
/**
 * Describes the message google.fhir.r4.core.Reference.
 * Use `create(ReferenceSchema)` to create a new message.
 */
exports.ReferenceSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 47);
/**
 * Describes the message google.fhir.r4.core.ReferenceId.
 * Use `create(ReferenceIdSchema)` to create a new message.
 */
exports.ReferenceIdSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 48);
/**
 * Describes the message google.fhir.r4.core.RelatedArtifact.
 * Use `create(RelatedArtifactSchema)` to create a new message.
 */
exports.RelatedArtifactSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 49);
/**
 * Describes the message google.fhir.r4.core.RelatedArtifact.TypeCode.
 * Use `create(RelatedArtifact_TypeCodeSchema)` to create a new message.
 */
exports.RelatedArtifact_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 49, 0);
/**
 * Describes the message google.fhir.r4.core.SampledData.
 * Use `create(SampledDataSchema)` to create a new message.
 */
exports.SampledDataSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 50);
/**
 * Describes the message google.fhir.r4.core.Signature.
 * Use `create(SignatureSchema)` to create a new message.
 */
exports.SignatureSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 51);
/**
 * Describes the message google.fhir.r4.core.Signature.TargetFormatCode.
 * Use `create(Signature_TargetFormatCodeSchema)` to create a new message.
 */
exports.Signature_TargetFormatCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 51, 0);
/**
 * Describes the message google.fhir.r4.core.Signature.SigFormatCode.
 * Use `create(Signature_SigFormatCodeSchema)` to create a new message.
 */
exports.Signature_SigFormatCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 51, 1);
/**
 * Describes the message google.fhir.r4.core.SimpleQuantity.
 * Use `create(SimpleQuantitySchema)` to create a new message.
 */
exports.SimpleQuantitySchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 52);
/**
 * Describes the message google.fhir.r4.core.String.
 * Use `create(StringSchema)` to create a new message.
 */
exports.StringSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 53);
/**
 * Describes the message google.fhir.r4.core.SubstanceAmount.
 * Use `create(SubstanceAmountSchema)` to create a new message.
 */
exports.SubstanceAmountSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 54);
/**
 * Describes the message google.fhir.r4.core.SubstanceAmount.AmountX.
 * Use `create(SubstanceAmount_AmountXSchema)` to create a new message.
 */
exports.SubstanceAmount_AmountXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 54, 0);
/**
 * Describes the message google.fhir.r4.core.SubstanceAmount.ReferenceRange.
 * Use `create(SubstanceAmount_ReferenceRangeSchema)` to create a new message.
 */
exports.SubstanceAmount_ReferenceRangeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 54, 1);
/**
 * Describes the message google.fhir.r4.core.Time.
 * Use `create(TimeSchema)` to create a new message.
 */
exports.TimeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 55);
/**
 * @generated from enum google.fhir.r4.core.Time.Precision
 */
var Time_Precision;
(function (Time_Precision) {
    /**
     * @generated from enum value: PRECISION_UNSPECIFIED = 0;
     */
    Time_Precision[Time_Precision["PRECISION_UNSPECIFIED"] = 0] = "PRECISION_UNSPECIFIED";
    /**
     * @generated from enum value: SECOND = 1;
     */
    Time_Precision[Time_Precision["SECOND"] = 1] = "SECOND";
    /**
     * @generated from enum value: MILLISECOND = 2;
     */
    Time_Precision[Time_Precision["MILLISECOND"] = 2] = "MILLISECOND";
    /**
     * @generated from enum value: MICROSECOND = 3;
     */
    Time_Precision[Time_Precision["MICROSECOND"] = 3] = "MICROSECOND";
})(Time_Precision || (exports.Time_Precision = Time_Precision = {}));
/**
 * Describes the enum google.fhir.r4.core.Time.Precision.
 */
exports.Time_PrecisionSchema = (0, codegenv1_1.enumDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 55, 0);
/**
 * Describes the message google.fhir.r4.core.Timing.
 * Use `create(TimingSchema)` to create a new message.
 */
exports.TimingSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.
 * Use `create(Timing_RepeatSchema)` to create a new message.
 */
exports.Timing_RepeatSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.BoundsX.
 * Use `create(Timing_Repeat_BoundsXSchema)` to create a new message.
 */
exports.Timing_Repeat_BoundsXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0, 0);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.DurationUnitCode.
 * Use `create(Timing_Repeat_DurationUnitCodeSchema)` to create a new message.
 */
exports.Timing_Repeat_DurationUnitCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0, 1);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.PeriodUnitCode.
 * Use `create(Timing_Repeat_PeriodUnitCodeSchema)` to create a new message.
 */
exports.Timing_Repeat_PeriodUnitCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0, 2);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.DayOfWeekCode.
 * Use `create(Timing_Repeat_DayOfWeekCodeSchema)` to create a new message.
 */
exports.Timing_Repeat_DayOfWeekCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0, 3);
/**
 * Describes the message google.fhir.r4.core.Timing.Repeat.WhenCode.
 * Use `create(Timing_Repeat_WhenCodeSchema)` to create a new message.
 */
exports.Timing_Repeat_WhenCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 56, 0, 4);
/**
 * Describes the message google.fhir.r4.core.TriggerDefinition.
 * Use `create(TriggerDefinitionSchema)` to create a new message.
 */
exports.TriggerDefinitionSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 57);
/**
 * Describes the message google.fhir.r4.core.TriggerDefinition.TypeCode.
 * Use `create(TriggerDefinition_TypeCodeSchema)` to create a new message.
 */
exports.TriggerDefinition_TypeCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 57, 0);
/**
 * Describes the message google.fhir.r4.core.TriggerDefinition.TimingX.
 * Use `create(TriggerDefinition_TimingXSchema)` to create a new message.
 */
exports.TriggerDefinition_TimingXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 57, 1);
/**
 * Describes the message google.fhir.r4.core.UnsignedInt.
 * Use `create(UnsignedIntSchema)` to create a new message.
 */
exports.UnsignedIntSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 58);
/**
 * Describes the message google.fhir.r4.core.Uri.
 * Use `create(UriSchema)` to create a new message.
 */
exports.UriSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 59);
/**
 * Describes the message google.fhir.r4.core.Url.
 * Use `create(UrlSchema)` to create a new message.
 */
exports.UrlSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 60);
/**
 * Describes the message google.fhir.r4.core.UsageContext.
 * Use `create(UsageContextSchema)` to create a new message.
 */
exports.UsageContextSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 61);
/**
 * Describes the message google.fhir.r4.core.UsageContext.ValueX.
 * Use `create(UsageContext_ValueXSchema)` to create a new message.
 */
exports.UsageContext_ValueXSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 61, 0);
/**
 * Describes the message google.fhir.r4.core.Uuid.
 * Use `create(UuidSchema)` to create a new message.
 */
exports.UuidSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 62);
/**
 * Describes the message google.fhir.r4.core.Xhtml.
 * Use `create(XhtmlSchema)` to create a new message.
 */
exports.XhtmlSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 63);
/**
 * Describes the message google.fhir.r4.core.CodingWithFixedCode.
 * Use `create(CodingWithFixedCodeSchema)` to create a new message.
 */
exports.CodingWithFixedCodeSchema = (0, codegenv1_1.messageDesc)(exports.file_proto_google_fhir_proto_r4_core_datatypes, 64);
