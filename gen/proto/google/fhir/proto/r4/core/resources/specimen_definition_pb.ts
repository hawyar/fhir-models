//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/specimen_definition.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_proto_google_fhir_proto_annotations } from "../../../annotations_pb";
import type { SpecimenContainedPreferenceCode_Value } from "../codes_pb";
import { file_proto_google_fhir_proto_r4_core_codes } from "../codes_pb";
import type { Boolean, Code, CodeableConcept, Duration, Extension, Id, Identifier, Meta, Narrative, Range, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb";
import { file_proto_google_fhir_proto_r4_core_datatypes } from "../datatypes_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/google/fhir/proto/r4/core/resources/specimen_definition.proto.
 */
export const file_proto_google_fhir_proto_r4_core_resources_specimen_definition: GenFile = /*@__PURE__*/
  fileDesc("CkNwcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL3Jlc291cmNlcy9zcGVjaW1lbl9kZWZpbml0aW9uLnByb3RvEhNnb29nbGUuZmhpci5yNC5jb3JlIqUbChJTcGVjaW1lbkRlZmluaXRpb24SIwoCaWQYASABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkEicKBG1ldGEYAiABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLk1ldGESMAoOaW1wbGljaXRfcnVsZXMYAyABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRIrCghsYW5ndWFnZRgEIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRIsCgR0ZXh0GAUgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5OYXJyYXRpdmUSJwoJY29udGFpbmVkGAYgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIxCglleHRlbnNpb24YCCADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YCSADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIzCgppZGVudGlmaWVyGAogASgLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5JZGVudGlmaWVyEjwKDnR5cGVfY29sbGVjdGVkGAsgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQSQQoTcGF0aWVudF9wcmVwYXJhdGlvbhgMIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjAKC3RpbWVfYXNwZWN0GA0gASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSOAoKY29sbGVjdGlvbhgOIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EkcKC3R5cGVfdGVzdGVkGA8gAygLMjIuZ29vZ2xlLmZoaXIucjQuY29yZS5TcGVjaW1lbkRlZmluaXRpb24uVHlwZVRlc3RlZBriFAoKVHlwZVRlc3RlZBInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjAKCmlzX2Rlcml2ZWQYBCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkJvb2xlYW4SMgoEdHlwZRgFIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0El0KCnByZWZlcmVuY2UYBiABKAsyQS5nb29nbGUuZmhpci5yNC5jb3JlLlNwZWNpbWVuRGVmaW5pdGlvbi5UeXBlVGVzdGVkLlByZWZlcmVuY2VDb2RlQgbw0IfrBAESTwoJY29udGFpbmVyGAcgASgLMjwuZ29vZ2xlLmZoaXIucjQuY29yZS5TcGVjaW1lbkRlZmluaXRpb24uVHlwZVRlc3RlZC5Db250YWluZXISMAoLcmVxdWlyZW1lbnQYCCABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxI1Cg5yZXRlbnRpb25fdGltZRgJIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRHVyYXRpb24SQQoTcmVqZWN0aW9uX2NyaXRlcmlvbhgKIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0Ek0KCGhhbmRsaW5nGAsgAygLMjsuZ29vZ2xlLmZoaXIucjQuY29yZS5TcGVjaW1lbkRlZmluaXRpb24uVHlwZVRlc3RlZC5IYW5kbGluZxqxAgoOUHJlZmVyZW5jZUNvZGUSSQoFdmFsdWUYASABKA4yOi5nb29nbGUuZmhpci5yNC5jb3JlLlNwZWNpbWVuQ29udGFpbmVkUHJlZmVyZW5jZUNvZGUuVmFsdWUSJwoCaWQYAiABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbjp4ivmDsgU6aHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC9zcGVjaW1lbi1jb250YWluZWQtcHJlZmVyZW5jZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlGu4JCglDb250YWluZXISJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI2CghtYXRlcmlhbBgEIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjIKBHR5cGUYBSABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBIxCgNjYXAYBiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdBIwCgtkZXNjcmlwdGlvbhgHIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjUKCGNhcGFjaXR5GAggASgLMiMuZ29vZ2xlLmZoaXIucjQuY29yZS5TaW1wbGVRdWFudGl0eRJjCg5taW5pbXVtX3ZvbHVtZRgJIAEoCzJLLmdvb2dsZS5maGlyLnI0LmNvcmUuU3BlY2ltZW5EZWZpbml0aW9uLlR5cGVUZXN0ZWQuQ29udGFpbmVyLk1pbmltdW1Wb2x1bWVYElcKCGFkZGl0aXZlGAogAygLMkUuZ29vZ2xlLmZoaXIucjQuY29yZS5TcGVjaW1lbkRlZmluaXRpb24uVHlwZVRlc3RlZC5Db250YWluZXIuQWRkaXRpdmUSMAoLcHJlcGFyYXRpb24YCyABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxqYAQoOTWluaW11bVZvbHVtZVgSNwoIcXVhbnRpdHkYASABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5SAASOwoMc3RyaW5nX3ZhbHVlGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmdIAFIGc3RyaW5nOgagg4PoBgFCCAoGY2hvaWNlGrUDCghBZGRpdGl2ZRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEmkKCGFkZGl0aXZlGAQgASgLMk8uZ29vZ2xlLmZoaXIucjQuY29yZS5TcGVjaW1lbkRlZmluaXRpb24uVHlwZVRlc3RlZC5Db250YWluZXIuQWRkaXRpdmUuQWRkaXRpdmVYQgbw0IfrBAEapQEKCUFkZGl0aXZlWBJAChBjb2RlYWJsZV9jb25jZXB0GAEgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHRIABJECglyZWZlcmVuY2UYAiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUIP8v/8wgYJU3Vic3RhbmNlSAA6BqCDg+gGAUIICgZjaG9pY2UahQMKCEhhbmRsaW5nEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SQwoVdGVtcGVyYXR1cmVfcXVhbGlmaWVyGAQgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQSNQoRdGVtcGVyYXR1cmVfcmFuZ2UYBSABKAsyGi5nb29nbGUuZmhpci5yNC5jb3JlLlJhbmdlEjMKDG1heF9kdXJhdGlvbhgGIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRHVyYXRpb24SMAoLaW5zdHJ1Y3Rpb24YByABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZzpGwJ/jtgUDsv7klwY6aHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1NwZWNpbWVuRGVmaW5pdGlvbkoECAcQCEKDAQoXY29tLmdvb2dsZS5maGlyLnI0LmNvcmVQAVpgZ2l0aHViLmNvbS9nb29nbGUvZmhpci9nby9wcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL3Jlc291cmNlcy9zcGVjaW1lbl9kZWZpbml0aW9uX2dvX3Byb3RvmMawtQcEYgZwcm90bzM", [file_google_protobuf_any, file_proto_google_fhir_proto_annotations, file_proto_google_fhir_proto_r4_core_codes, file_proto_google_fhir_proto_r4_core_datatypes]);

/**
 * Auto-generated from StructureDefinition for SpecimenDefinition.
 * Kind of specimen.
 * See http://hl7.org/fhir/StructureDefinition/SpecimenDefinition
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition
 */
export type SpecimenDefinition = Message<"google.fhir.r4.core.SpecimenDefinition"> & {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[];

  /**
   * Business identifier of a kind of specimen
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * Kind of material to collect
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type_collected = 11;
   */
  typeCollected?: CodeableConcept;

  /**
   * Patient preparation for collection
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept patient_preparation = 12;
   */
  patientPreparation: CodeableConcept[];

  /**
   * Time aspect for collection
   *
   * @generated from field: google.fhir.r4.core.String time_aspect = 13;
   */
  timeAspect?: String;

  /**
   * Specimen collection procedure
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept collection = 14;
   */
  collection: CodeableConcept[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested type_tested = 15;
   */
  typeTested: SpecimenDefinition_TypeTested[];
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.
 * Use `create(SpecimenDefinitionSchema)` to create a new message.
 */
export const SpecimenDefinitionSchema: GenMessage<SpecimenDefinition> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0);

/**
 * Specimen in container intended for testing by lab
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested
 */
export type SpecimenDefinition_TypeTested = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Primary or secondary specimen
   *
   * @generated from field: google.fhir.r4.core.Boolean is_derived = 4;
   */
  isDerived?: Boolean;

  /**
   * Type of intended specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode preference = 6;
   */
  preference?: SpecimenDefinition_TypeTested_PreferenceCode;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container container = 7;
   */
  container?: SpecimenDefinition_TypeTested_Container;

  /**
   * Specimen requirements
   *
   * @generated from field: google.fhir.r4.core.String requirement = 8;
   */
  requirement?: String;

  /**
   * Specimen retention time
   *
   * @generated from field: google.fhir.r4.core.Duration retention_time = 9;
   */
  retentionTime?: Duration;

  /**
   * Rejection criterion
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept rejection_criterion = 10;
   */
  rejectionCriterion: CodeableConcept[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling handling = 11;
   */
  handling: SpecimenDefinition_TypeTested_Handling[];
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.
 * Use `create(SpecimenDefinition_TypeTestedSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTestedSchema: GenMessage<SpecimenDefinition_TypeTested> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0);

/**
 * preferred | alternate
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode
 */
export type SpecimenDefinition_TypeTested_PreferenceCode = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.SpecimenContainedPreferenceCode.Value value = 1;
   */
  value: SpecimenContainedPreferenceCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode.
 * Use `create(SpecimenDefinition_TypeTested_PreferenceCodeSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_PreferenceCodeSchema: GenMessage<SpecimenDefinition_TypeTested_PreferenceCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 0);

/**
 * The specimen's container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container
 */
export type SpecimenDefinition_TypeTested_Container = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.Container"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Container material
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept material = 4;
   */
  material?: CodeableConcept;

  /**
   * Kind of container associated with the kind of specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Color of container cap
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept cap = 6;
   */
  cap?: CodeableConcept;

  /**
   * Container description
   *
   * @generated from field: google.fhir.r4.core.String description = 7;
   */
  description?: String;

  /**
   * Container capacity
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity capacity = 8;
   */
  capacity?: SimpleQuantity;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX minimum_volume = 9;
   */
  minimumVolume?: SpecimenDefinition_TypeTested_Container_MinimumVolumeX;

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive additive = 10;
   */
  additive: SpecimenDefinition_TypeTested_Container_Additive[];

  /**
   * Specimen container preparation
   *
   * @generated from field: google.fhir.r4.core.String preparation = 11;
   */
  preparation?: String;
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.
 * Use `create(SpecimenDefinition_TypeTested_ContainerSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_ContainerSchema: GenMessage<SpecimenDefinition_TypeTested_Container> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 1);

/**
 * Minimum volume
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX
 */
export type SpecimenDefinition_TypeTested_Container_MinimumVolumeX = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 1;
     */
    value: SimpleQuantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX.
 * Use `create(SpecimenDefinition_TypeTested_Container_MinimumVolumeXSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_Container_MinimumVolumeXSchema: GenMessage<SpecimenDefinition_TypeTested_Container_MinimumVolumeX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 1, 0);

/**
 * Additive associated with container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive
 */
export type SpecimenDefinition_TypeTested_Container_Additive = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX additive = 4;
   */
  additive?: SpecimenDefinition_TypeTested_Container_Additive_AdditiveX;
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.
 * Use `create(SpecimenDefinition_TypeTested_Container_AdditiveSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_Container_AdditiveSchema: GenMessage<SpecimenDefinition_TypeTested_Container_Additive> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 1, 1);

/**
 * Additive associated with container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX
 */
export type SpecimenDefinition_TypeTested_Container_Additive_AdditiveX = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX.
 * Use `create(SpecimenDefinition_TypeTested_Container_Additive_AdditiveXSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_Container_Additive_AdditiveXSchema: GenMessage<SpecimenDefinition_TypeTested_Container_Additive_AdditiveX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 1, 1, 0);

/**
 * Specimen handling before testing
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling
 */
export type SpecimenDefinition_TypeTested_Handling = Message<"google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Temperature qualifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept temperature_qualifier = 4;
   */
  temperatureQualifier?: CodeableConcept;

  /**
   * Temperature range
   *
   * @generated from field: google.fhir.r4.core.Range temperature_range = 5;
   */
  temperatureRange?: Range;

  /**
   * Maximum preservation time
   *
   * @generated from field: google.fhir.r4.core.Duration max_duration = 6;
   */
  maxDuration?: Duration;

  /**
   * Preservation instruction
   *
   * @generated from field: google.fhir.r4.core.String instruction = 7;
   */
  instruction?: String;
};

/**
 * Describes the message google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling.
 * Use `create(SpecimenDefinition_TypeTested_HandlingSchema)` to create a new message.
 */
export const SpecimenDefinition_TypeTested_HandlingSchema: GenMessage<SpecimenDefinition_TypeTested_Handling> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_specimen_definition, 0, 0, 2);

