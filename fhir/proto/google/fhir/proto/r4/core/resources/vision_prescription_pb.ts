//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/vision_prescription.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_proto_google_fhir_proto_annotations } from "../../../annotations_pb";
import type { FinancialResourceStatusCode_Value, VisionBaseCode_Value, VisionEyesCode_Value } from "../codes_pb";
import { file_proto_google_fhir_proto_r4_core_codes } from "../codes_pb";
import type { Annotation, Code, CodeableConcept, DateTime, Decimal, Extension, Id, Identifier, Integer, Meta, Narrative, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb";
import { file_proto_google_fhir_proto_r4_core_datatypes } from "../datatypes_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/google/fhir/proto/r4/core/resources/vision_prescription.proto.
 */
export const file_proto_google_fhir_proto_r4_core_resources_vision_prescription: GenFile = /*@__PURE__*/
  fileDesc("CkNwcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL3Jlc291cmNlcy92aXNpb25fcHJlc2NyaXB0aW9uLnByb3RvEhNnb29nbGUuZmhpci5yNC5jb3JlIp8YChJWaXNpb25QcmVzY3JpcHRpb24SIwoCaWQYASABKAsyFy5nb29nbGUuZmhpci5yNC5jb3JlLklkEicKBG1ldGEYAiABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLk1ldGESMAoOaW1wbGljaXRfcnVsZXMYAyABKAsyGC5nb29nbGUuZmhpci5yNC5jb3JlLlVyaRIrCghsYW5ndWFnZRgEIAEoCzIZLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZRIsCgR0ZXh0GAUgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5OYXJyYXRpdmUSJwoJY29udGFpbmVkGAYgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIxCglleHRlbnNpb24YCCADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YCSADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhIzCgppZGVudGlmaWVyGAogAygLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5JZGVudGlmaWVyEkoKBnN0YXR1cxgLIAEoCzIyLmdvb2dsZS5maGlyLnI0LmNvcmUuVmlzaW9uUHJlc2NyaXB0aW9uLlN0YXR1c0NvZGVCBvDQh+sEARI2CgdjcmVhdGVkGAwgASgLMh0uZ29vZ2xlLmZoaXIucjQuY29yZS5EYXRlVGltZUIG8NCH6wQBEkQKB3BhdGllbnQYDSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUIT8NCH6wQB8v/8wgYHUGF0aWVudBJCCgllbmNvdW50ZXIYDiABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUIP8v/8wgYJRW5jb3VudGVyEjsKDGRhdGVfd3JpdHRlbhgPIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWVCBvDQh+sEARJiCgpwcmVzY3JpYmVyGBAgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCLvDQh+sEAfL//MIGDFByYWN0aXRpb25lcvL//MIGEFByYWN0aXRpb25lclJvbGUSXQoSbGVuc19zcGVjaWZpY2F0aW9uGBEgAygLMjkuZ29vZ2xlLmZoaXIucjQuY29yZS5WaXNpb25QcmVzY3JpcHRpb24uTGVuc1NwZWNpZmljYXRpb25CBvDQh+sEARqVAgoKU3RhdHVzQ29kZRJFCgV2YWx1ZRgBIAEoDjI2Lmdvb2dsZS5maGlyLnI0LmNvcmUuRmluYW5jaWFsUmVzb3VyY2VTdGF0dXNDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246ZIr5g7IFJmh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvZm0tc3RhdHVzwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGUa7A0KEUxlbnNTcGVjaWZpY2F0aW9uEicKAmlkGAEgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAIgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SPQoHcHJvZHVjdBgEIAEoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0Qgbw0IfrBAESVgoDZXllGAUgASgLMkEuZ29vZ2xlLmZoaXIucjQuY29yZS5WaXNpb25QcmVzY3JpcHRpb24uTGVuc1NwZWNpZmljYXRpb24uRXllQ29kZUIG8NCH6wQBEiwKBnNwaGVyZRgGIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuRGVjaW1hbBIuCghjeWxpbmRlchgHIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuRGVjaW1hbBIqCgRheGlzGAggASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5JbnRlZ2VyEk4KBXByaXNtGAkgAygLMj8uZ29vZ2xlLmZoaXIucjQuY29yZS5WaXNpb25QcmVzY3JpcHRpb24uTGVuc1NwZWNpZmljYXRpb24uUHJpc20SKQoDYWRkGAogASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEisKBXBvd2VyGAsgASgLMhwuZ29vZ2xlLmZoaXIucjQuY29yZS5EZWNpbWFsEjAKCmJhY2tfY3VydmUYDCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSLgoIZGlhbWV0ZXIYDSABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWwSNQoIZHVyYXRpb24YDiABKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLlNpbXBsZVF1YW50aXR5EioKBWNvbG9yGA8gASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSKgoFYnJhbmQYECABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxItCgRub3RlGBEgAygLMh8uZ29vZ2xlLmZoaXIucjQuY29yZS5Bbm5vdGF0aW9uGowCCgdFeWVDb2RlEjgKBXZhbHVlGAEgASgOMikuZ29vZ2xlLmZoaXIucjQuY29yZS5WaXNpb25FeWVzQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOmuK+YOyBS1odHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3Zpc2lvbi1leWUtY29kZXPAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZRrGBAoFUHJpc20SJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI0CgZhbW91bnQYBCABKAsyHC5nb29nbGUuZmhpci5yNC5jb3JlLkRlY2ltYWxCBvDQh+sEARJeCgRiYXNlGAUgASgLMkguZ29vZ2xlLmZoaXIucjQuY29yZS5WaXNpb25QcmVzY3JpcHRpb24uTGVuc1NwZWNpZmljYXRpb24uUHJpc20uQmFzZUNvZGVCBvDQh+sEARqOAgoIQmFzZUNvZGUSOAoFdmFsdWUYASABKA4yKS5nb29nbGUuZmhpci5yNC5jb3JlLlZpc2lvbkJhc2VDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246bIr5g7IFLmh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmlzaW9uLWJhc2UtY29kZXPAn+O2BQGatY6TBixodHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vY29kZTpGwJ/jtgUDsv7klwY6aHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL1Zpc2lvblByZXNjcmlwdGlvbkoECAcQCEKDAQoXY29tLmdvb2dsZS5maGlyLnI0LmNvcmVQAVpgZ2l0aHViLmNvbS9nb29nbGUvZmhpci9nby9wcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL3Jlc291cmNlcy92aXNpb25fcHJlc2NyaXB0aW9uX2dvX3Byb3RvmMawtQcEYgZwcm90bzM", [file_google_protobuf_any, file_proto_google_fhir_proto_annotations, file_proto_google_fhir_proto_r4_core_codes, file_proto_google_fhir_proto_r4_core_datatypes]);

/**
 * Auto-generated from StructureDefinition for VisionPrescription.
 * Prescription for vision correction products for a patient.
 * See http://hl7.org/fhir/StructureDefinition/VisionPrescription
 *
 * @generated from message google.fhir.r4.core.VisionPrescription
 */
export type VisionPrescription = Message<"google.fhir.r4.core.VisionPrescription"> & {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[];

  /**
   * Business Identifier for vision prescription
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[];

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.StatusCode status = 11;
   */
  status?: VisionPrescription_StatusCode;

  /**
   * Response creation date
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 12;
   */
  created?: DateTime;

  /**
   * Who prescription is for
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 13;
   */
  patient?: Reference;

  /**
   * Created during encounter / admission / stay
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 14;
   */
  encounter?: Reference;

  /**
   * When prescription was authorized
   *
   * @generated from field: google.fhir.r4.core.DateTime date_written = 15;
   */
  dateWritten?: DateTime;

  /**
   * Who authorized the vision prescription
   *
   * @generated from field: google.fhir.r4.core.Reference prescriber = 16;
   */
  prescriber?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.VisionPrescription.LensSpecification lens_specification = 17;
   */
  lensSpecification: VisionPrescription_LensSpecification[];
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.
 * Use `create(VisionPrescriptionSchema)` to create a new message.
 */
export const VisionPrescriptionSchema: GenMessage<VisionPrescription> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0);

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.StatusCode
 */
export type VisionPrescription_StatusCode = Message<"google.fhir.r4.core.VisionPrescription.StatusCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value: FinancialResourceStatusCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.StatusCode.
 * Use `create(VisionPrescription_StatusCodeSchema)` to create a new message.
 */
export const VisionPrescription_StatusCodeSchema: GenMessage<VisionPrescription_StatusCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0, 0);

/**
 * Vision lens authorization
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification
 */
export type VisionPrescription_LensSpecification = Message<"google.fhir.r4.core.VisionPrescription.LensSpecification"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Product to be supplied
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product = 4;
   */
  product?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode eye = 5;
   */
  eye?: VisionPrescription_LensSpecification_EyeCode;

  /**
   * Power of the lens
   *
   * @generated from field: google.fhir.r4.core.Decimal sphere = 6;
   */
  sphere?: Decimal;

  /**
   * Lens power for astigmatism
   *
   * @generated from field: google.fhir.r4.core.Decimal cylinder = 7;
   */
  cylinder?: Decimal;

  /**
   * Lens meridian which contain no power for astigmatism
   *
   * @generated from field: google.fhir.r4.core.Integer axis = 8;
   */
  axis?: Integer;

  /**
   * @generated from field: repeated google.fhir.r4.core.VisionPrescription.LensSpecification.Prism prism = 9;
   */
  prism: VisionPrescription_LensSpecification_Prism[];

  /**
   * Added power for multifocal levels
   *
   * @generated from field: google.fhir.r4.core.Decimal add = 10;
   */
  add?: Decimal;

  /**
   * Contact lens power
   *
   * @generated from field: google.fhir.r4.core.Decimal power = 11;
   */
  power?: Decimal;

  /**
   * Contact lens back curvature
   *
   * @generated from field: google.fhir.r4.core.Decimal back_curve = 12;
   */
  backCurve?: Decimal;

  /**
   * Contact lens diameter
   *
   * @generated from field: google.fhir.r4.core.Decimal diameter = 13;
   */
  diameter?: Decimal;

  /**
   * Lens wear duration
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity duration = 14;
   */
  duration?: SimpleQuantity;

  /**
   * Color required
   *
   * @generated from field: google.fhir.r4.core.String color = 15;
   */
  color?: String;

  /**
   * Brand required
   *
   * @generated from field: google.fhir.r4.core.String brand = 16;
   */
  brand?: String;

  /**
   * Notes for coatings
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 17;
   */
  note: Annotation[];
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.LensSpecification.
 * Use `create(VisionPrescription_LensSpecificationSchema)` to create a new message.
 */
export const VisionPrescription_LensSpecificationSchema: GenMessage<VisionPrescription_LensSpecification> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0, 1);

/**
 * right | left
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode
 */
export type VisionPrescription_LensSpecification_EyeCode = Message<"google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.VisionEyesCode.Value value = 1;
   */
  value: VisionEyesCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode.
 * Use `create(VisionPrescription_LensSpecification_EyeCodeSchema)` to create a new message.
 */
export const VisionPrescription_LensSpecification_EyeCodeSchema: GenMessage<VisionPrescription_LensSpecification_EyeCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0, 1, 0);

/**
 * Eye alignment compensation
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism
 */
export type VisionPrescription_LensSpecification_Prism = Message<"google.fhir.r4.core.VisionPrescription.LensSpecification.Prism"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Amount of adjustment
   *
   * @generated from field: google.fhir.r4.core.Decimal amount = 4;
   */
  amount?: Decimal;

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode base = 5;
   */
  base?: VisionPrescription_LensSpecification_Prism_BaseCode;
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.
 * Use `create(VisionPrescription_LensSpecification_PrismSchema)` to create a new message.
 */
export const VisionPrescription_LensSpecification_PrismSchema: GenMessage<VisionPrescription_LensSpecification_Prism> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0, 1, 1);

/**
 * up | down | in | out
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode
 */
export type VisionPrescription_LensSpecification_Prism_BaseCode = Message<"google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.VisionBaseCode.Value value = 1;
   */
  value: VisionBaseCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode.
 * Use `create(VisionPrescription_LensSpecification_Prism_BaseCodeSchema)` to create a new message.
 */
export const VisionPrescription_LensSpecification_Prism_BaseCodeSchema: GenMessage<VisionPrescription_LensSpecification_Prism_BaseCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_vision_prescription, 0, 1, 1, 0);

