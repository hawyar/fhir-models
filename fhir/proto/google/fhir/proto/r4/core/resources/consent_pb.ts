//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/consent.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_proto_google_fhir_proto_annotations } from "../../../annotations_pb";
import type { ConsentDataMeaningCode_Value, ConsentProvisionTypeCode_Value, ConsentStateCode_Value } from "../codes_pb";
import { file_proto_google_fhir_proto_r4_core_codes } from "../codes_pb";
import type { Attachment, Boolean, Code, CodeableConcept, Coding, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb";
import { file_proto_google_fhir_proto_r4_core_datatypes } from "../datatypes_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/google/fhir/proto/r4/core/resources/consent.proto.
 */
export const file_proto_google_fhir_proto_r4_core_resources_consent: GenFile = /*@__PURE__*/
  fileDesc("Cjdwcm90by9nb29nbGUvZmhpci9wcm90by9yNC9jb3JlL3Jlc291cmNlcy9jb25zZW50LnByb3RvEhNnb29nbGUuZmhpci5yNC5jb3JlIvcmCgdDb25zZW50EiMKAmlkGAEgASgLMhcuZ29vZ2xlLmZoaXIucjQuY29yZS5JZBInCgRtZXRhGAIgASgLMhkuZ29vZ2xlLmZoaXIucjQuY29yZS5NZXRhEjAKDmltcGxpY2l0X3J1bGVzGAMgASgLMhguZ29vZ2xlLmZoaXIucjQuY29yZS5VcmkSKwoIbGFuZ3VhZ2UYBCABKAsyGS5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGUSLAoEdGV4dBgFIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuTmFycmF0aXZlEicKCWNvbnRhaW5lZBgGIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSMQoJZXh0ZW5zaW9uGAggAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SOgoSbW9kaWZpZXJfZXh0ZW5zaW9uGAkgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb24SMwoKaWRlbnRpZmllchgKIAMoCzIfLmdvb2dsZS5maGlyLnI0LmNvcmUuSWRlbnRpZmllchI/CgZzdGF0dXMYCyABKAsyJy5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnNlbnQuU3RhdHVzQ29kZUIG8NCH6wQBEjsKBXNjb3BlGAwgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHRCBvDQh+sEARI+CghjYXRlZ29yeRgNIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0Qgbw0IfrBAESPgoHcGF0aWVudBgOIAEoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlQg3y//zCBgdQYXRpZW50EjAKCWRhdGVfdGltZRgPIAEoCzIdLmdvb2dsZS5maGlyLnI0LmNvcmUuRGF0ZVRpbWUSjQEKCXBlcmZvcm1lchgQIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuUmVmZXJlbmNlQlry//zCBgxPcmdhbml6YXRpb27y//zCBgdQYXRpZW508v/8wgYMUHJhY3RpdGlvbmVy8v/8wgYNUmVsYXRlZFBlcnNvbvL//MIGEFByYWN0aXRpb25lclJvbGUSSAoMb3JnYW5pemF0aW9uGBEgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCEvL//MIGDE9yZ2FuaXphdGlvbhI0CgZzb3VyY2UYEiABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnNlbnQuU291cmNlWBIzCgZwb2xpY3kYEyADKAsyIy5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnNlbnQuUG9saWN5EjkKC3BvbGljeV9ydWxlGBQgASgLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQSPwoMdmVyaWZpY2F0aW9uGBUgAygLMikuZ29vZ2xlLmZoaXIucjQuY29yZS5Db25zZW50LlZlcmlmaWNhdGlvbhI5Cglwcm92aXNpb24YFiABKAsyJi5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnNlbnQuUHJvdmlzaW9uGpQCCgpTdGF0dXNDb2RlEjoKBXZhbHVlGAEgASgOMisuZ29vZ2xlLmZoaXIucjQuY29yZS5Db25zZW50U3RhdGVDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246bor5g7IFMGh0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uc2VudC1zdGF0ZS1jb2Rlc8Cf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlGtcBCgdTb3VyY2VYEjUKCmF0dGFjaG1lbnQYASABKAsyHy5nb29nbGUuZmhpci5yNC5jb3JlLkF0dGFjaG1lbnRIABKCAQoJcmVmZXJlbmNlGAIgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCTfL//MIGB0NvbnNlbnTy//zCBhFEb2N1bWVudFJlZmVyZW5jZfL//MIGCENvbnRyYWN08v/8wgYVUXVlc3Rpb25uYWlyZVJlc3BvbnNlSAA6BqCDg+gGAUIICgZjaG9pY2Ua9AEKBlBvbGljeRInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEisKCWF1dGhvcml0eRgEIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpEiUKA3VyaRgFIAEoCzIYLmdvb2dsZS5maGlyLnI0LmNvcmUuVXJpGvECCgxWZXJpZmljYXRpb24SJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI2Cgh2ZXJpZmllZBgEIAEoCzIcLmdvb2dsZS5maGlyLnI0LmNvcmUuQm9vbGVhbkIG8NCH6wQBElcKDXZlcmlmaWVkX3dpdGgYBSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUIg8v/8wgYHUGF0aWVudPL//MIGDVJlbGF0ZWRQZXJzb24SOAoRdmVyaWZpY2F0aW9uX2RhdGUYBiABKAsyHS5nb29nbGUuZmhpci5yNC5jb3JlLkRhdGVUaW1lGrwQCglQcm92aXNpb24SJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI9CgR0eXBlGAQgASgLMi8uZ29vZ2xlLmZoaXIucjQuY29yZS5Db25zZW50LlByb3Zpc2lvbi5UeXBlQ29kZRIrCgZwZXJpb2QYBSABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlBlcmlvZBJECgVhY3RvchgGIAMoCzI1Lmdvb2dsZS5maGlyLnI0LmNvcmUuQ29uc2VudC5Qcm92aXNpb24uUHJvdmlzaW9uQWN0b3ISNAoGYWN0aW9uGAcgAygLMiQuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RlYWJsZUNvbmNlcHQSMwoOc2VjdXJpdHlfbGFiZWwYCCADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZxIsCgdwdXJwb3NlGAkgAygLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5Db2RpbmcSNwoLY2xhc3NfdmFsdWUYCiADKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGluZ1IFY2xhc3MSMgoEY29kZRgLIAMoCzIkLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29kZWFibGVDb25jZXB0EjAKC2RhdGFfcGVyaW9kGAwgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5QZXJpb2QSQgoEZGF0YRgNIAMoCzI0Lmdvb2dsZS5maGlyLnI0LmNvcmUuQ29uc2VudC5Qcm92aXNpb24uUHJvdmlzaW9uRGF0YRI5Cglwcm92aXNpb24YDiADKAsyJi5nb29nbGUuZmhpci5yNC5jb3JlLkNvbnNlbnQuUHJvdmlzaW9uGp0CCghUeXBlQ29kZRJCCgV2YWx1ZRgBIAEoDjIzLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29uc2VudFByb3Zpc2lvblR5cGVDb2RlLlZhbHVlEicKAmlkGAIgASgLMhsuZ29vZ2xlLmZoaXIucjQuY29yZS5TdHJpbmcSMQoJZXh0ZW5zaW9uGAMgAygLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5FeHRlbnNpb246cYr5g7IFM2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvY29uc2VudC1wcm92aXNpb24tdHlwZcCf47YFAZq1jpMGLGh0dHA6Ly9obDcub3JnL2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9jb2RlGqADCg5Qcm92aXNpb25BY3RvchInCgJpZBgBIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgCIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKEm1vZGlmaWVyX2V4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uEjoKBHJvbGUYBCABKAsyJC5nb29nbGUuZmhpci5yNC5jb3JlLkNvZGVhYmxlQ29uY2VwdEIG8NCH6wQBErkBCglyZWZlcmVuY2UYBSABKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLlJlZmVyZW5jZUKFAfDQh+sEAfL//MIGBkRldmljZfL//MIGBUdyb3Vw8v/8wgYIQ2FyZVRlYW3y//zCBgxPcmdhbml6YXRpb27y//zCBgdQYXRpZW508v/8wgYMUHJhY3RpdGlvbmVy8v/8wgYNUmVsYXRlZFBlcnNvbvL//MIGEFByYWN0aXRpb25lclJvbGUa6gQKDVByb3Zpc2lvbkRhdGESJwoCaWQYASABKAsyGy5nb29nbGUuZmhpci5yNC5jb3JlLlN0cmluZxIxCglleHRlbnNpb24YAiADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhI6ChJtb2RpZmllcl9leHRlbnNpb24YAyADKAsyHi5nb29nbGUuZmhpci5yNC5jb3JlLkV4dGVuc2lvbhJZCgdtZWFuaW5nGAQgASgLMkAuZ29vZ2xlLmZoaXIucjQuY29yZS5Db25zZW50LlByb3Zpc2lvbi5Qcm92aXNpb25EYXRhLk1lYW5pbmdDb2RlQgbw0IfrBAESRwoJcmVmZXJlbmNlGAUgASgLMh4uZ29vZ2xlLmZoaXIucjQuY29yZS5SZWZlcmVuY2VCFPDQh+sEAfL//MIGCFJlc291cmNlGpwCCgtNZWFuaW5nQ29kZRJACgV2YWx1ZRgBIAEoDjIxLmdvb2dsZS5maGlyLnI0LmNvcmUuQ29uc2VudERhdGFNZWFuaW5nQ29kZS5WYWx1ZRInCgJpZBgCIAEoCzIbLmdvb2dsZS5maGlyLnI0LmNvcmUuU3RyaW5nEjEKCWV4dGVuc2lvbhgDIAMoCzIeLmdvb2dsZS5maGlyLnI0LmNvcmUuRXh0ZW5zaW9uOm+K+YOyBTFodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L2NvbnNlbnQtZGF0YS1tZWFuaW5nwJ/jtgUBmrWOkwYsaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvZGU69gPAn+O2BQOy/uSXBi9odHRwOi8vaGw3Lm9yZy9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vQ29uc2VudJqGk6AIJnBvbGljeS5leGlzdHMoKSBvciBwb2xpY3lSdWxlLmV4aXN0cygpmoaToAhkcGF0aWVudC5leGlzdHMoKSBvciBzY29wZS5jb2Rpbmcud2hlcmUoc3lzdGVtPSdzb21ldGhpbmcnIGFuZCBjb2RlPSdwYXRpZW50LXByaXZhY3knKS5leGlzdHMoKS5ub3QoKZqGk6AIXXBhdGllbnQuZXhpc3RzKCkgb3Igc2NvcGUuY29kaW5nLndoZXJlKHN5c3RlbT0nc29tZXRoaW5nJyBhbmQgY29kZT0ncmVzZWFyY2gnKS5leGlzdHMoKS5ub3QoKZqGk6AIWHBhdGllbnQuZXhpc3RzKCkgb3Igc2NvcGUuY29kaW5nLndoZXJlKHN5c3RlbT0nc29tZXRoaW5nJyBhbmQgY29kZT0nYWRyJykuZXhpc3RzKCkubm90KCmahpOgCF5wYXRpZW50LmV4aXN0cygpIG9yIHNjb3BlLmNvZGluZy53aGVyZShzeXN0ZW09J3NvbWV0aGluZycgYW5kIGNvZGU9J3RyZWF0bWVudCcpLmV4aXN0cygpLm5vdCgpSgQIBxAIQncKF2NvbS5nb29nbGUuZmhpci5yNC5jb3JlUAFaVGdpdGh1Yi5jb20vZ29vZ2xlL2ZoaXIvZ28vcHJvdG8vZ29vZ2xlL2ZoaXIvcHJvdG8vcjQvY29yZS9yZXNvdXJjZXMvY29uc2VudF9nb19wcm90b5jGsLUHBGIGcHJvdG8z", [file_google_protobuf_any, file_proto_google_fhir_proto_annotations, file_proto_google_fhir_proto_r4_core_codes, file_proto_google_fhir_proto_r4_core_datatypes]);

/**
 * Auto-generated from StructureDefinition for Consent.
 * A healthcare consumer's  choices to permit or deny recipients or roles to
 * perform actions for specific purposes and periods of time. See
 * http://hl7.org/fhir/StructureDefinition/Consent
 *
 * @generated from message google.fhir.r4.core.Consent
 */
export type Consent = Message<"google.fhir.r4.core.Consent"> & {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[];

  /**
   * Identifier for this record (external references)
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[];

  /**
   * @generated from field: google.fhir.r4.core.Consent.StatusCode status = 11;
   */
  status?: Consent_StatusCode;

  /**
   * Which of the four areas this resource covers (extensible)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept scope = 12;
   */
  scope?: CodeableConcept;

  /**
   * Classification of the consent statement - for indexing/retrieval
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[];

  /**
   * Who the consent applies to
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 14;
   */
  patient?: Reference;

  /**
   * When this Consent was created or indexed
   *
   * @generated from field: google.fhir.r4.core.DateTime date_time = 15;
   */
  dateTime?: DateTime;

  /**
   * Who is agreeing to the policy and rules
   *
   * @generated from field: repeated google.fhir.r4.core.Reference performer = 16;
   */
  performer: Reference[];

  /**
   * Custodian of the consent
   *
   * @generated from field: repeated google.fhir.r4.core.Reference organization = 17;
   */
  organization: Reference[];

  /**
   * @generated from field: google.fhir.r4.core.Consent.SourceX source = 18;
   */
  source?: Consent_SourceX;

  /**
   * @generated from field: repeated google.fhir.r4.core.Consent.Policy policy = 19;
   */
  policy: Consent_Policy[];

  /**
   * Regulation that this consents to
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept policy_rule = 20;
   */
  policyRule?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.Consent.Verification verification = 21;
   */
  verification: Consent_Verification[];

  /**
   * @generated from field: google.fhir.r4.core.Consent.Provision provision = 22;
   */
  provision?: Consent_Provision;
};

/**
 * Describes the message google.fhir.r4.core.Consent.
 * Use `create(ConsentSchema)` to create a new message.
 */
export const ConsentSchema: GenMessage<Consent> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0);

/**
 * draft | proposed | active | rejected | inactive | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Consent.StatusCode
 */
export type Consent_StatusCode = Message<"google.fhir.r4.core.Consent.StatusCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.ConsentStateCode.Value value = 1;
   */
  value: ConsentStateCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.Consent.StatusCode.
 * Use `create(Consent_StatusCodeSchema)` to create a new message.
 */
export const Consent_StatusCodeSchema: GenMessage<Consent_StatusCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 0);

/**
 * Source from which this consent is taken
 *
 * @generated from message google.fhir.r4.core.Consent.SourceX
 */
export type Consent_SourceX = Message<"google.fhir.r4.core.Consent.SourceX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.Consent.SourceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 1;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.Consent.SourceX.
 * Use `create(Consent_SourceXSchema)` to create a new message.
 */
export const Consent_SourceXSchema: GenMessage<Consent_SourceX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 1);

/**
 * Policies covered by this consent
 *
 * @generated from message google.fhir.r4.core.Consent.Policy
 */
export type Consent_Policy = Message<"google.fhir.r4.core.Consent.Policy"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Enforcement source for policy
   *
   * @generated from field: google.fhir.r4.core.Uri authority = 4;
   */
  authority?: Uri;

  /**
   * Specific policy covered by this consent
   *
   * @generated from field: google.fhir.r4.core.Uri uri = 5;
   */
  uri?: Uri;
};

/**
 * Describes the message google.fhir.r4.core.Consent.Policy.
 * Use `create(Consent_PolicySchema)` to create a new message.
 */
export const Consent_PolicySchema: GenMessage<Consent_Policy> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 2);

/**
 * Consent Verified by patient or family
 *
 * @generated from message google.fhir.r4.core.Consent.Verification
 */
export type Consent_Verification = Message<"google.fhir.r4.core.Consent.Verification"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Has been verified
   *
   * @generated from field: google.fhir.r4.core.Boolean verified = 4;
   */
  verified?: Boolean;

  /**
   * Person who verified
   *
   * @generated from field: google.fhir.r4.core.Reference verified_with = 5;
   */
  verifiedWith?: Reference;

  /**
   * When consent verified
   *
   * @generated from field: google.fhir.r4.core.DateTime verification_date = 6;
   */
  verificationDate?: DateTime;
};

/**
 * Describes the message google.fhir.r4.core.Consent.Verification.
 * Use `create(Consent_VerificationSchema)` to create a new message.
 */
export const Consent_VerificationSchema: GenMessage<Consent_Verification> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 3);

/**
 * Constraints to the base Consent.policyRule
 *
 * @generated from message google.fhir.r4.core.Consent.Provision
 */
export type Consent_Provision = Message<"google.fhir.r4.core.Consent.Provision"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * @generated from field: google.fhir.r4.core.Consent.Provision.TypeCode type = 4;
   */
  type?: Consent_Provision_TypeCode;

  /**
   * Timeframe for this rule
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  /**
   * @generated from field: repeated google.fhir.r4.core.Consent.Provision.ProvisionActor actor = 6;
   */
  actor: Consent_Provision_ProvisionActor[];

  /**
   * Actions controlled by this rule
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept action = 7;
   */
  action: CodeableConcept[];

  /**
   * Security Labels that define affected resources
   *
   * @generated from field: repeated google.fhir.r4.core.Coding security_label = 8;
   */
  securityLabel: Coding[];

  /**
   * Context of activities covered by this rule
   *
   * @generated from field: repeated google.fhir.r4.core.Coding purpose = 9;
   */
  purpose: Coding[];

  /**
   * e.g. Resource Type, Profile, CDA, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.Coding class_value = 10 [json_name = "class"];
   */
  classValue: Coding[];

  /**
   * e.g. LOINC or SNOMED CT code, etc. in the content
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept code = 11;
   */
  code: CodeableConcept[];

  /**
   * Timeframe for data controlled by this rule
   *
   * @generated from field: google.fhir.r4.core.Period data_period = 12;
   */
  dataPeriod?: Period;

  /**
   * @generated from field: repeated google.fhir.r4.core.Consent.Provision.ProvisionData data = 13;
   */
  data: Consent_Provision_ProvisionData[];

  /**
   * Nested Exception Rules
   *
   * @generated from field: repeated google.fhir.r4.core.Consent.Provision provision = 14;
   */
  provision: Consent_Provision[];
};

/**
 * Describes the message google.fhir.r4.core.Consent.Provision.
 * Use `create(Consent_ProvisionSchema)` to create a new message.
 */
export const Consent_ProvisionSchema: GenMessage<Consent_Provision> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 4);

/**
 * deny | permit
 *
 * @generated from message google.fhir.r4.core.Consent.Provision.TypeCode
 */
export type Consent_Provision_TypeCode = Message<"google.fhir.r4.core.Consent.Provision.TypeCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.ConsentProvisionTypeCode.Value value = 1;
   */
  value: ConsentProvisionTypeCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.Consent.Provision.TypeCode.
 * Use `create(Consent_Provision_TypeCodeSchema)` to create a new message.
 */
export const Consent_Provision_TypeCodeSchema: GenMessage<Consent_Provision_TypeCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 4, 0);

/**
 * Who|what controlled by this rule (or group, by role)
 *
 * @generated from message google.fhir.r4.core.Consent.Provision.ProvisionActor
 */
export type Consent_Provision_ProvisionActor = Message<"google.fhir.r4.core.Consent.Provision.ProvisionActor"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * How the actor is involved
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 4;
   */
  role?: CodeableConcept;

  /**
   * Resource for the actor (or group, by role)
   *
   * @generated from field: google.fhir.r4.core.Reference reference = 5;
   */
  reference?: Reference;
};

/**
 * Describes the message google.fhir.r4.core.Consent.Provision.ProvisionActor.
 * Use `create(Consent_Provision_ProvisionActorSchema)` to create a new message.
 */
export const Consent_Provision_ProvisionActorSchema: GenMessage<Consent_Provision_ProvisionActor> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 4, 1);

/**
 * Data controlled by this rule
 *
 * @generated from message google.fhir.r4.core.Consent.Provision.ProvisionData
 */
export type Consent_Provision_ProvisionData = Message<"google.fhir.r4.core.Consent.Provision.ProvisionData"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * @generated from field: google.fhir.r4.core.Consent.Provision.ProvisionData.MeaningCode meaning = 4;
   */
  meaning?: Consent_Provision_ProvisionData_MeaningCode;

  /**
   * The actual data reference
   *
   * @generated from field: google.fhir.r4.core.Reference reference = 5;
   */
  reference?: Reference;
};

/**
 * Describes the message google.fhir.r4.core.Consent.Provision.ProvisionData.
 * Use `create(Consent_Provision_ProvisionDataSchema)` to create a new message.
 */
export const Consent_Provision_ProvisionDataSchema: GenMessage<Consent_Provision_ProvisionData> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 4, 2);

/**
 * instance | related | dependents | authoredby
 *
 * @generated from message google.fhir.r4.core.Consent.Provision.ProvisionData.MeaningCode
 */
export type Consent_Provision_ProvisionData_MeaningCode = Message<"google.fhir.r4.core.Consent.Provision.ProvisionData.MeaningCode"> & {
  /**
   * @generated from field: google.fhir.r4.core.ConsentDataMeaningCode.Value value = 1;
   */
  value: ConsentDataMeaningCode_Value;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[];
};

/**
 * Describes the message google.fhir.r4.core.Consent.Provision.ProvisionData.MeaningCode.
 * Use `create(Consent_Provision_ProvisionData_MeaningCodeSchema)` to create a new message.
 */
export const Consent_Provision_ProvisionData_MeaningCodeSchema: GenMessage<Consent_Provision_ProvisionData_MeaningCode> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_consent, 0, 4, 2, 0);

