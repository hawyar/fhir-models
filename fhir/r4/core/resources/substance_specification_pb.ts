//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_specification.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_proto_google_fhir_proto_annotations } from "../../../annotations_pb";
import type { Attachment, Boolean, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Quantity, Range, Ratio, Reference, String, Uri } from "../datatypes_pb";
import { file_proto_google_fhir_proto_r4_core_datatypes } from "../datatypes_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/google/fhir/proto/r4/core/resources/substance_specification.proto.
 */
export const file_proto_google_fhir_proto_r4_core_resources_substance_specification: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_any, file_proto_google_fhir_proto_annotations, file_proto_google_fhir_proto_r4_core_datatypes]);

/**
 * Auto-generated from StructureDefinition for SubstanceSpecification.
 * The detailed description of a substance, typically at a level beyond what is
 * used for prescribing. See
 * http://hl7.org/fhir/StructureDefinition/SubstanceSpecification
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification
 */
export type SubstanceSpecification = Message<"google.fhir.r4.core.SubstanceSpecification"> & {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[];

  /**
   * Identifier by which this substance is known
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * High level categorization, e.g. polymer or nucleic acid
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 11;
   */
  type?: CodeableConcept;

  /**
   * Status of substance within the catalogue e.g. approved
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 12;
   */
  status?: CodeableConcept;

  /**
   * If the substance applies to only human or veterinary use
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept domain = 13;
   */
  domain?: CodeableConcept;

  /**
   * Textual description of the substance
   *
   * @generated from field: google.fhir.r4.core.String description = 14;
   */
  description?: String;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 15;
   */
  source: Reference[];

  /**
   * Textual comment about this record of a substance
   *
   * @generated from field: google.fhir.r4.core.String comment = 16;
   */
  comment?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Moiety moiety = 17;
   */
  moiety: SubstanceSpecification_Moiety[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Property property = 18;
   */
  property: SubstanceSpecification_Property[];

  /**
   * General information detailing this substance
   *
   * @generated from field: google.fhir.r4.core.Reference reference_information = 19;
   */
  referenceInformation?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure structure = 20;
   */
  structure?: SubstanceSpecification_Structure;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.CodeType code = 21;
   */
  code: SubstanceSpecification_CodeType[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name name = 22;
   */
  name: SubstanceSpecification_Name[];

  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic
   * acids)
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 23;
   */
  molecularWeight: SubstanceSpecification_Structure_Isotope_MolecularWeight[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Relationship relationship = 24;
   */
  relationship: SubstanceSpecification_Relationship[];

  /**
   * Data items specific to nucleic acids
   *
   * @generated from field: google.fhir.r4.core.Reference nucleic_acid = 25;
   */
  nucleicAcid?: Reference;

  /**
   * Data items specific to polymers
   *
   * @generated from field: google.fhir.r4.core.Reference polymer = 26;
   */
  polymer?: Reference;

  /**
   * Data items specific to proteins
   *
   * @generated from field: google.fhir.r4.core.Reference protein = 27;
   */
  protein?: Reference;

  /**
   * Material or taxonomic/anatomical source for the substance
   *
   * @generated from field: google.fhir.r4.core.Reference source_material = 28;
   */
  sourceMaterial?: Reference;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.
 * Use `create(SubstanceSpecificationSchema)` to create a new message.
 */
export const SubstanceSpecificationSchema: GenMessage<SubstanceSpecification> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0);

/**
 * Moiety, for structural modifications
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Moiety
 */
export type SubstanceSpecification_Moiety = Message<"google.fhir.r4.core.SubstanceSpecification.Moiety"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Role that the moiety is playing
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 4;
   */
  role?: CodeableConcept;

  /**
   * Identifier by which this moiety substance is known
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 5;
   */
  identifier?: Identifier;

  /**
   * Textual name for this moiety substance
   *
   * @generated from field: google.fhir.r4.core.String name = 6;
   */
  name?: String;

  /**
   * Stereochemistry type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept stereochemistry = 7;
   */
  stereochemistry?: CodeableConcept;

  /**
   * Optical activity type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept optical_activity = 8;
   */
  opticalActivity?: CodeableConcept;

  /**
   * Molecular formula
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula = 9;
   */
  molecularFormula?: String;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX amount = 10;
   */
  amount?: SubstanceSpecification_Moiety_AmountX;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Moiety.
 * Use `create(SubstanceSpecification_MoietySchema)` to create a new message.
 */
export const SubstanceSpecification_MoietySchema: GenMessage<SubstanceSpecification_Moiety> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 0);

/**
 * Quantitative value for this moiety
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX
 */
export type SubstanceSpecification_Moiety_AmountX = Message<"google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX.
 * Use `create(SubstanceSpecification_Moiety_AmountXSchema)` to create a new message.
 */
export const SubstanceSpecification_Moiety_AmountXSchema: GenMessage<SubstanceSpecification_Moiety_AmountX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 0, 0);

/**
 * General specifications for this substance, including how it is related to
 * other substances
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property
 */
export type SubstanceSpecification_Property = Message<"google.fhir.r4.core.SubstanceSpecification.Property"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * A category for this property, e.g. Physical, Chemical, Enzymatic
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 4;
   */
  category?: CodeableConcept;

  /**
   * Property type e.g. viscosity, pH, isoelectric point
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 5;
   */
  code?: CodeableConcept;

  /**
   * Parameters that were used in the measurement of a property (e.g. for
   * viscosity: measured at 20C with a pH of 7.1)
   *
   * @generated from field: google.fhir.r4.core.String parameters = 6;
   */
  parameters?: String;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX defining_substance = 7;
   */
  definingSubstance?: SubstanceSpecification_Property_DefiningSubstanceX;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Property.AmountX amount = 8;
   */
  amount?: SubstanceSpecification_Property_AmountX;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Property.
 * Use `create(SubstanceSpecification_PropertySchema)` to create a new message.
 */
export const SubstanceSpecification_PropertySchema: GenMessage<SubstanceSpecification_Property> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 1);

/**
 * A substance upon which a defining property depends (e.g. for solubility:
 * in water, in alcohol)
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX
 */
export type SubstanceSpecification_Property_DefiningSubstanceX = Message<"google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX.
 * Use `create(SubstanceSpecification_Property_DefiningSubstanceXSchema)` to create a new message.
 */
export const SubstanceSpecification_Property_DefiningSubstanceXSchema: GenMessage<SubstanceSpecification_Property_DefiningSubstanceX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 1, 0);

/**
 * Quantitative value for this property
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property.AmountX
 */
export type SubstanceSpecification_Property_AmountX = Message<"google.fhir.r4.core.SubstanceSpecification.Property.AmountX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Property.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Property.AmountX.
 * Use `create(SubstanceSpecification_Property_AmountXSchema)` to create a new message.
 */
export const SubstanceSpecification_Property_AmountXSchema: GenMessage<SubstanceSpecification_Property_AmountX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 1, 1);

/**
 * Structural information
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure
 */
export type SubstanceSpecification_Structure = Message<"google.fhir.r4.core.SubstanceSpecification.Structure"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Stereochemistry type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept stereochemistry = 4;
   */
  stereochemistry?: CodeableConcept;

  /**
   * Optical activity type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept optical_activity = 5;
   */
  opticalActivity?: CodeableConcept;

  /**
   * Molecular formula
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula = 6;
   */
  molecularFormula?: String;

  /**
   * Specified per moiety according to the Hill system, i.e. first C, then H,
   * then alphabetical, each moiety separated by a dot
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula_by_moiety = 7;
   */
  molecularFormulaByMoiety?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Isotope isotope = 8;
   */
  isotope: SubstanceSpecification_Structure_Isotope[];

  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic
   * acids)
   *
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 9;
   */
  molecularWeight?: SubstanceSpecification_Structure_Isotope_MolecularWeight;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 10;
   */
  source: Reference[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Representation representation = 11;
   */
  representation: SubstanceSpecification_Structure_Representation[];
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Structure.
 * Use `create(SubstanceSpecification_StructureSchema)` to create a new message.
 */
export const SubstanceSpecification_StructureSchema: GenMessage<SubstanceSpecification_Structure> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 2);

/**
 * Applicable for single substances that contain a radionuclide or a
 * non-natural isotopic ratio
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope
 */
export type SubstanceSpecification_Structure_Isotope = Message<"google.fhir.r4.core.SubstanceSpecification.Structure.Isotope"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Substance identifier for each non-natural or radioisotope
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * Substance name for each non-natural or radioisotope
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept name = 5;
   */
  name?: CodeableConcept;

  /**
   * The type of isotopic substitution present in a single substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept substitution = 6;
   */
  substitution?: CodeableConcept;

  /**
   * Half life - for a non-natural nuclide
   *
   * @generated from field: google.fhir.r4.core.Quantity half_life = 7;
   */
  halfLife?: Quantity;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 8;
   */
  molecularWeight?: SubstanceSpecification_Structure_Isotope_MolecularWeight;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.
 * Use `create(SubstanceSpecification_Structure_IsotopeSchema)` to create a new message.
 */
export const SubstanceSpecification_Structure_IsotopeSchema: GenMessage<SubstanceSpecification_Structure_Isotope> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 2, 0);

/**
 * The molecular weight or weight range (for proteins, polymers or nucleic
 * acids)
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
 */
export type SubstanceSpecification_Structure_Isotope_MolecularWeight = Message<"google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * The method by which the molecular weight was determined
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 4;
   */
  method?: CodeableConcept;

  /**
   * Type of molecular weight such as exact, average (also known as.
   * number average), weight average
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Used to capture quantitative values for a variety of elements. If
   * only limits are given, the arithmetic mean would be the average. If
   * only a single definite value for a given element is given, it would
   * be captured in this field
   *
   * @generated from field: google.fhir.r4.core.Quantity amount = 6;
   */
  amount?: Quantity;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight.
 * Use `create(SubstanceSpecification_Structure_Isotope_MolecularWeightSchema)` to create a new message.
 */
export const SubstanceSpecification_Structure_Isotope_MolecularWeightSchema: GenMessage<SubstanceSpecification_Structure_Isotope_MolecularWeight> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 2, 0, 0);

/**
 * Molecular structural representation
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Representation
 */
export type SubstanceSpecification_Structure_Representation = Message<"google.fhir.r4.core.SubstanceSpecification.Structure.Representation"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * The type of structure (e.g. Full, Partial, Representative)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * The structural representation as text string in a format e.g. InChI,
   * SMILES, MOLFILE, CDX
   *
   * @generated from field: google.fhir.r4.core.String representation = 5;
   */
  representation?: String;

  /**
   * An attached file with the structural representation
   *
   * @generated from field: google.fhir.r4.core.Attachment attachment = 6;
   */
  attachment?: Attachment;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Structure.Representation.
 * Use `create(SubstanceSpecification_Structure_RepresentationSchema)` to create a new message.
 */
export const SubstanceSpecification_Structure_RepresentationSchema: GenMessage<SubstanceSpecification_Structure_Representation> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 2, 1);

/**
 * Codes associated with the substance
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.CodeType
 */
export type SubstanceSpecification_CodeType = Message<"google.fhir.r4.core.SubstanceSpecification.CodeType"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * The specific code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Status of the code assignment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 5;
   */
  status?: CodeableConcept;

  /**
   * The date at which the code status is changed as part of the terminology
   * maintenance
   *
   * @generated from field: google.fhir.r4.core.DateTime status_date = 6;
   */
  statusDate?: DateTime;

  /**
   * Any comment can be provided in this field, if necessary
   *
   * @generated from field: google.fhir.r4.core.String comment = 7;
   */
  comment?: String;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 8;
   */
  source: Reference[];
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.CodeType.
 * Use `create(SubstanceSpecification_CodeTypeSchema)` to create a new message.
 */
export const SubstanceSpecification_CodeTypeSchema: GenMessage<SubstanceSpecification_CodeType> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 3);

/**
 * Names applicable to this substance
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Name
 */
export type SubstanceSpecification_Name = Message<"google.fhir.r4.core.SubstanceSpecification.Name"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * The actual name
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Name type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * The status of the name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 6;
   */
  status?: CodeableConcept;

  /**
   * If this is the preferred name for this substance
   *
   * @generated from field: google.fhir.r4.core.Boolean preferred = 7;
   */
  preferred?: Boolean;

  /**
   * Language of the name
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept language = 8;
   */
  language: CodeableConcept[];

  /**
   * The use context of this name for example if there is a different name a
   * drug active ingredient as opposed to a food colour additive
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept domain = 9;
   */
  domain: CodeableConcept[];

  /**
   * The jurisdiction where this name applies
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 10;
   */
  jurisdiction: CodeableConcept[];

  /**
   * A synonym of this name
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name synonym = 11;
   */
  synonym: SubstanceSpecification_Name[];

  /**
   * A translation for this name
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name translation = 12;
   */
  translation: SubstanceSpecification_Name[];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name.Official official = 13;
   */
  official: SubstanceSpecification_Name_Official[];

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 14;
   */
  source: Reference[];
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Name.
 * Use `create(SubstanceSpecification_NameSchema)` to create a new message.
 */
export const SubstanceSpecification_NameSchema: GenMessage<SubstanceSpecification_Name> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 4);

/**
 * Details of the official nature of this name
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Name.Official
 */
export type SubstanceSpecification_Name_Official = Message<"google.fhir.r4.core.SubstanceSpecification.Name.Official"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * Which authority uses this official name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept authority = 4;
   */
  authority?: CodeableConcept;

  /**
   * The status of the official name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 5;
   */
  status?: CodeableConcept;

  /**
   * Date of official name change
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 6;
   */
  date?: DateTime;
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Name.Official.
 * Use `create(SubstanceSpecification_Name_OfficialSchema)` to create a new message.
 */
export const SubstanceSpecification_Name_OfficialSchema: GenMessage<SubstanceSpecification_Name_Official> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 4, 0);

/**
 * A link between this substance and another, with details of the relationship
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship
 */
export type SubstanceSpecification_Relationship = Message<"google.fhir.r4.core.SubstanceSpecification.Relationship"> & {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[];

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX substance = 4;
   */
  substance?: SubstanceSpecification_Relationship_SubstanceX;

  /**
   * For example "salt to parent", "active moiety", "starting material"
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept relationship = 5;
   */
  relationship?: CodeableConcept;

  /**
   * For example where an enzyme strongly bonds with a particular substance,
   * this is a defining relationship for that enzyme, out of several possible
   * substance relationships
   *
   * @generated from field: google.fhir.r4.core.Boolean is_defining = 6;
   */
  isDefining?: Boolean;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX amount = 7;
   */
  amount?: SubstanceSpecification_Relationship_AmountX;

  /**
   * For use when the numeric
   *
   * @generated from field: google.fhir.r4.core.Ratio amount_ratio_low_limit = 8;
   */
  amountRatioLowLimit?: Ratio;

  /**
   * An operator for the amount, for example "average", "approximately", "less
   * than"
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept amount_type = 9;
   */
  amountType?: CodeableConcept;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 10;
   */
  source: Reference[];
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Relationship.
 * Use `create(SubstanceSpecification_RelationshipSchema)` to create a new message.
 */
export const SubstanceSpecification_RelationshipSchema: GenMessage<SubstanceSpecification_Relationship> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 5);

/**
 * A pointer to another substance, as a resource or just a representational
 * code
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX
 */
export type SubstanceSpecification_Relationship_SubstanceX = Message<"google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX.
 * Use `create(SubstanceSpecification_Relationship_SubstanceXSchema)` to create a new message.
 */
export const SubstanceSpecification_Relationship_SubstanceXSchema: GenMessage<SubstanceSpecification_Relationship_SubstanceX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 5, 0);

/**
 * A numeric factor for the relationship, for instance to express that the
 * salt of a substance has some percentage of the active substance in
 * relation to some other
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX
 */
export type SubstanceSpecification_Relationship_AmountX = Message<"google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX"> & {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Ratio ratio = 3;
     */
    value: Ratio;
    case: "ratio";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 4 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.
 * Use `create(SubstanceSpecification_Relationship_AmountXSchema)` to create a new message.
 */
export const SubstanceSpecification_Relationship_AmountXSchema: GenMessage<SubstanceSpecification_Relationship_AmountX> = /*@__PURE__*/
  messageDesc(file_proto_google_fhir_proto_r4_core_resources_substance_specification, 0, 5, 1);

